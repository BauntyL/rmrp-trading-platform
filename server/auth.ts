import passport from "passport";
import { Strategy as LocalStrategy } from "passport-local";
import { Express } from "express";
import session from "express-session";
import bcrypt from "bcrypt";
import { storage } from "./storage";
import { User as SelectUser } from "@shared/schema";
import { z } from "zod";

// –°–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞
interface LoginAttempt {
  ip: string;
  username: string;
  timestamp: number;
  success: boolean;
}

class SecurityManager {
  private loginAttempts: Map<string, LoginAttempt[]> = new Map();
  private blockedIPs: Map<string, number> = new Map();
  private readonly MAX_ATTEMPTS = 5;
  private readonly BLOCK_DURATION = 15 * 60 * 1000; // 15 –º–∏–Ω—É—Ç
  private readonly ATTEMPT_WINDOW = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç

  private getKey(ip: string, username: string): string {
    return `${ip}:${username}`;
  }

  recordAttempt(ip: string, username: string, success: boolean): void {
    const key = this.getKey(ip, username);
    const now = Date.now();
    
    if (!this.loginAttempts.has(key)) {
      this.loginAttempts.set(key, []);
    }
    
    const attempts = this.loginAttempts.get(key)!;
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø–æ–ø—ã—Ç–∫–∏ (—Å—Ç–∞—Ä—à–µ 5 –º–∏–Ω—É—Ç)
    const recentAttempts = attempts.filter(attempt => 
      now - attempt.timestamp < this.ATTEMPT_WINDOW
    );
    
    recentAttempts.push({
      ip,
      username,
      timestamp: now,
      success
    });
    
    this.loginAttempts.set(key, recentAttempts);
    
    // –ë–ª–æ–∫–∏—Ä—É–µ–º IP –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
    if (!success) {
      const failedAttempts = recentAttempts.filter(a => !a.success).length;
      if (failedAttempts >= this.MAX_ATTEMPTS) {
        this.blockedIPs.set(ip, now + this.BLOCK_DURATION);
        console.log(`üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω IP ${ip} –Ω–∞ 15 –º–∏–Ω—É—Ç (${failedAttempts} –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è ${username})`);
      }
    }
  }

  isBlocked(ip: string): boolean {
    const blockUntil = this.blockedIPs.get(ip);
    if (!blockUntil) return false;
    
    if (Date.now() > blockUntil) {
      this.blockedIPs.delete(ip);
      return false;
    }
    
    return true;
  }

  getAttemptsCount(ip: string, username: string): number {
    const key = this.getKey(ip, username);
    const attempts = this.loginAttempts.get(key) || [];
    const now = Date.now();
    
    return attempts.filter(attempt => 
      now - attempt.timestamp < this.ATTEMPT_WINDOW && !attempt.success
    ).length;
  }
}

const securityManager = new SecurityManager();

declare global {
  namespace Express {
    interface User extends SelectUser {}
  }
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª–µ–π
const passwordSchema = z.string()
  .min(8, "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤")
  .regex(/[A-Z]/, "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∑–∞–≥–ª–∞–≤–Ω—É—é –±—É–∫–≤—É")
  .regex(/[a-z]/, "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å—Ç—Ä–æ—á–Ω—É—é –±—É–∫–≤—É")
  .regex(/[0-9]/, "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É")
  .regex(/[^A-Za-z0-9]/, "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª");

const registerSchema = z.object({
  username: z.string()
    .min(3, "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞")
    .max(50, "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 50 —Å–∏–º–≤–æ–ª–æ–≤")
    .regex(/^[a-zA-Z–∞-—è–ê-–Ø]+ [a-zA-Z–∞-—è–ê-–Ø]+$/, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç: –ò–º—è –§–∞–º–∏–ª–∏—è (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –æ–¥–∏–Ω –ø—Ä–æ–±–µ–ª)"),
  password: passwordSchema,
});

const loginSchema = z.object({
  username: z.string().min(1, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
  password: z.string().min(1, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"),
});

export function setupAuth(app: Express) {
  const sessionSettings: session.SessionOptions = {
    secret: process.env.SESSION_SECRET || "fallback-secret-key",
    resave: false,
    saveUninitialized: false,
    store: storage.sessionStore,
    cookie: {
      secure: process.env.NODE_ENV === "production",
      httpOnly: true,
      maxAge: 2 * 60 * 60 * 1000, // 2 —á–∞—Å–∞ (—É–º–µ–Ω—å—à–µ–Ω–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
      sameSite: "strict"
    },
  };

  app.set("trust proxy", 1);
  app.use(session(sessionSettings));
  app.use(passport.initialize());
  app.use(passport.session());

  passport.use(
    new LocalStrategy(async (username, password, done) => {
      try {
        const user = await storage.getUserByUsername(username);
        if (!user) {
          // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ, —É–¥–∞–ª–µ–Ω)
          return done(null, false, { message: "user_not_found" });
        }
        if (!(await bcrypt.compare(password, user.password))) {
          // –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å
          return done(null, false, { message: "wrong_password" });
        }
        return done(null, user);
      } catch (error) {
        return done(error);
      }
    }),
  );

  passport.serializeUser((user, done) => done(null, user.id));
  passport.deserializeUser(async (id: number, done) => {
    try {
      const user = await storage.getUser(id);
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —É–¥–∞–ª–µ–Ω, –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é –±–µ–∑ –æ—à–∏–±–∫–∏
      if (!user) {
        return done(null, null);
      }
      done(null, user);
    } catch (error) {
      // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –Ω–µ –ø–µ—Ä–µ–¥–∞–µ–º –µ–µ –¥–∞–ª—å—à–µ
      console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–µ—Å—Å–∏–∏:', error);
      done(null, null);
    }
  });

  // Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ IP
  const checkIPBlock = (req: any, res: any, next: any) => {
    const clientIP = req.ip || req.connection.remoteAddress || '127.0.0.1';
    
    if (securityManager.isBlocked(clientIP)) {
      console.log(`üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π IP ${clientIP} –ø—ã—Ç–∞–µ—Ç—Å—è –≤–æ–π—Ç–∏`);
      return res.status(429).json({ 
        message: "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç.",
        blocked: true
      });
    }
    
    next();
  };

  app.post("/api/register", checkIPBlock, async (req, res, next) => {
    try {
      const clientIP = req.ip || req.connection.remoteAddress || '127.0.0.1';
      
      const validation = registerSchema.safeParse(req.body);
      if (!validation.success) {
        const firstError = validation.error.errors[0];
        return res.status(400).json({ 
          message: firstError.message,
          field: firstError.path[0]
        });
      }

      const { username, password } = validation.data;
      
      const existingUser = await storage.getUserByUsername(username);
      if (existingUser) {
        return res.status(400).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" });
      }

      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –Ω–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
      const hashedPassword = await bcrypt.hash(password, 12);
      const user = await storage.createUser({
        username,
        password: hashedPassword,
        role: "user",
      });

      console.log(`‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: ${username} (IP: ${clientIP})`);

      req.login(user, (err) => {
        if (err) return next(err);
        res.status(201).json({ 
          id: user.id, 
          username: user.username, 
          role: user.role,
          createdAt: user.createdAt,
        });
      });
    } catch (error) {
      next(error);
    }
  });

  app.post("/api/login", checkIPBlock, async (req, res, next) => {
    const clientIP = req.ip || req.connection.remoteAddress || '127.0.0.1';
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –≤—Ö–æ–¥–∞
    const validation = loginSchema.safeParse(req.body);
    if (!validation.success) {
      return res.status(400).json({ message: "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª—å" });
    }
    
    const { username } = validation.data;
    const attemptsCount = securityManager.getAttemptsCount(clientIP, username);
    
    passport.authenticate("local", (err: any, user: SelectUser | false, info?: any) => {
      if (err) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è ${username} (IP: ${clientIP}):`, err);
        return next(err);
      }
      
      if (!user) {
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–µ—É–¥–∞—á–Ω—É—é –ø–æ–ø—ã—Ç–∫—É
        securityManager.recordAttempt(clientIP, username, false);
        const newAttemptsCount = securityManager.getAttemptsCount(clientIP, username);
        
        console.log(`üîë –ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞: ${username} (IP: ${clientIP}, –ø–æ–ø—ã—Ç–æ–∫: ${newAttemptsCount})`);
        
        const remainingAttempts = Math.max(0, 5 - newAttemptsCount);
        let message: string;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ info –æ—Ç passport
        if (info?.message === "user_not_found") {
          message = "–ê–∫–∫–∞—É–Ω—Ç —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –±—ã–ª —É–¥–∞–ª–µ–Ω. –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ.";
        } else {
          message = "–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å";
          
          if (remainingAttempts <= 2 && remainingAttempts > 0) {
            message += `. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: ${remainingAttempts}`;
          } else if (remainingAttempts === 0) {
            message = "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫. IP –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ 15 –º–∏–Ω—É—Ç.";
          }
        }
        
        return res.status(401).json({ message, attemptsLeft: remainingAttempts });
      }
      
      // –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥
      securityManager.recordAttempt(clientIP, username, true);
      console.log(`‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥: ${username} (IP: ${clientIP})`);
      
      req.login(user, (err) => {
        if (err) return next(err);
        res.json({ 
          id: user.id, 
          username: user.username, 
          role: user.role,
          createdAt: user.createdAt,
        });
      });
    })(req, res, next);
  });

  app.post("/api/logout", (req, res, next) => {
    req.logout((err) => {
      if (err) return next(err);
      res.sendStatus(200);
    });
  });

  app.get("/api/user", (req, res) => {
    if (!req.isAuthenticated() || !req.user) {
      return res.sendStatus(401);
    }
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
    storage.getUser(req.user.id).then(user => {
      if (!user) {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —É–¥–∞–ª–µ–Ω, –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é
        req.logout((err) => {
          if (err) console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err);
        });
        return res.sendStatus(401);
      }
      
      res.json({
        id: user.id,
        username: user.username,
        role: user.role,
        createdAt: user.createdAt,
      });
    }).catch(error => {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      res.sendStatus(401);
    });
  });
}
