import express from "express";
import session from "express-session";
import passport from "passport";
import { Strategy as LocalStrategy } from "passport-local";
import bcrypt from "bcrypt";
import { storage } from "./storage.js";
import path from "path";

const app = express();

console.log("üöÄ Starting server...");
console.log("PORT:", process.env.PORT || 3000);
console.log("NODE_ENV:", process.env.NODE_ENV);

console.log("üì¶ Trying to import express...");
console.log("üì¶ Trying to import other modules...");
console.log("üì¶ Trying to import storage...");
console.log("‚úÖ Storage imported successfully");

console.log("üîß Setting up middleware...");

// Middleware
app.use(express.json());
app.use(express.urlencoded({ extended: false }));

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res, next) => {
  console.log(`üåê ${req.method} ${req.path} - Content-Type: ${req.headers['content-type']} - Session: ${req.sessionID?.substring(0, 8)}...`);
  next();
});

// Session configuration
app.use(session({
  secret: 'trading-platform-secret-key-2024',
  resave: false,
  saveUninitialized: false,
  cookie: {
    secure: false,
    maxAge: 24 * 60 * 60 * 1000, // 24 hours
    httpOnly: true,
    sameSite: 'lax'
  },
  store: storage.sessionStore,
}));

app.use(passport.initialize());
app.use(passport.session());

console.log("üîß Setting up passport strategy...");

// Passport strategy
passport.use(new LocalStrategy(
  async (username, password, done) => {
    try {
      console.log(`üîë Trying to authenticate user: ${username}`);
      const user = await storage.getUserByUsername(username);
      
      if (!user) {
        console.log(`‚ùå User not found: ${username}`);
        return done(null, false, { message: '–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
      }

      const isValid = await bcrypt.compare(password, user.password);
      if (!isValid) {
        console.log(`‚ùå Invalid password for user: ${username}`);
        return done(null, false, { message: '–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
      }

      console.log(`‚úÖ User authenticated successfully: ${username}`);
      return done(null, user);
    } catch (error) {
      console.error('‚ùå Authentication error:', error);
      return done(error);
    }
  }
));

passport.serializeUser((user, done) => {
  console.log(`üîß Serializing user: ${user.username} (ID: ${user.id})`);
  done(null, user.id);
});

passport.deserializeUser(async (id, done) => {
  try {
    console.log(`üîß Deserializing user ID: ${id}`);
    const user = await storage.getUser(id);
    if (user) {
      console.log(`‚úÖ User deserialized: ${user.username}`);
    } else {
      console.log(`‚ùå User not found during deserialization: ${id}`);
    }
    done(null, user);
  } catch (error) {
    console.error('‚ùå Deserialization error:', error);
    done(error);
  }
});

console.log("üîß Setting up API routes...");

// Login route (—Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç /api/login)
app.post('/api/login', (req, res, next) => {
  console.log(`üìù Login attempt via /api/login for: ${req.body.username}`);
  
  passport.authenticate('local', (err, user, info) => {
    if (err) {
      console.error('‚ùå Login error:', err);
      return res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
    
    if (!user) {
      console.log(`‚ùå Login failed: ${info?.message || 'Authentication failed'}`);
      return res.status(401).json({ error: info?.message || '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞' });
    }

    req.logIn(user, (err) => {
      if (err) {
        console.error('‚ùå Session creation error:', err);
        return res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏' });
      }
      
      console.log(`‚úÖ Login successful via /api/login: ${user.username}`);
      console.log(`üç™ Session created: ${req.sessionID}`);
      console.log(`üç™ User in session:`, req.user ? req.user.username : 'none');
      
      const { password, ...userWithoutPassword } = user;
      console.log(`üì§ Sending user data to frontend:`, JSON.stringify(userWithoutPassword));
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–æ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–µ, —á—Ç–æ –æ–∂–∏–¥–∞–µ—Ç —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥
      res.json(userWithoutPassword);
    });
  })(req, res, next);
});

// Register route (—Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç /api/register)
app.post('/api/register', async (req, res) => {
  console.log(`üìù Registration attempt for: ${req.body.username}`);
  
  try {
    const { username, password } = req.body;
    
    if (!username || !password) {
      console.log(`‚ùå Registration failed: missing username or password`);
      return res.status(400).json({ error: '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const existingUser = await storage.getUserByUsername(username);
    if (existingUser) {
      console.log(`‚ùå Registration failed: user already exists: ${username}`);
      return res.status(400).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
    }

    // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
    const hashedPassword = await bcrypt.hash(password, 10);
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await storage.createUser({
      username,
      password: hashedPassword,
      role: 'user'
    });

    console.log(`‚úÖ User registered successfully: ${user.username} with ID: ${user.id}`);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    req.logIn(user, (err) => {
      if (err) {
        console.error('‚ùå Auto-login error after registration:', err);
        return res.status(500).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω, –Ω–æ –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—Ö–æ–¥–∞' });
      }
      
      console.log(`‚úÖ Auto-login successful after registration: ${user.username}`);
      console.log(`üç™ Session created after registration: ${req.sessionID}`);
      console.log(`üç™ User in session:`, req.user ? req.user.username : 'none');
      
      const { password, ...userWithoutPassword } = user;
      console.log(`üì§ Sending registered user data to frontend:`, JSON.stringify(userWithoutPassword));
      res.status(201).json(userWithoutPassword);
    });
    
  } catch (error) {
    console.error('‚ùå Registration error:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' });
  }
});

// User routes - –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
app.get('/api/user', (req, res) => {
  console.log(`üìù GET /api/user - Session: ${req.sessionID?.substring(0, 8)}...`);
  console.log(`üìù User in request: ${req.user?.username || 'not authenticated'}`);
  console.log(`üìù Session user ID: ${req.session?.passport?.user || 'none'}`);
  
  if (req.user) {
    const { password, ...userWithoutPassword } = req.user;
    console.log(`‚úÖ User data sent via /api/user: ${userWithoutPassword.username}`);
    console.log(`üì§ User object:`, JSON.stringify(userWithoutPassword));
    res.json(userWithoutPassword);
  } else {
    console.log(`‚ùå User not authenticated`);
    res.status(401).json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' });
  }
});

app.get('/api/auth/me', (req, res) => {
  console.log(`üìù GET /api/auth/me - Session: ${req.sessionID?.substring(0, 8)}...`);
  console.log(`üìù User in request: ${req.user?.username || 'not authenticated'}`);
  
  if (req.user) {
    const { password, ...userWithoutPassword } = req.user;
    console.log(`‚úÖ User data sent via /api/auth/me: ${userWithoutPassword.username}`);
    console.log(`üì§ User object:`, JSON.stringify(userWithoutPassword));
    res.json({ user: userWithoutPassword });
  } else {
    console.log(`‚ùå User not authenticated`);
    res.status(401).json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' });
  }
});

app.get('/api/me', (req, res) => {
  console.log(`üìù GET /api/me - Session: ${req.sessionID?.substring(0, 8)}...`);
  console.log(`üìù User in request: ${req.user?.username || 'not authenticated'}`);
  
  if (req.user) {
    const { password, ...userWithoutPassword } = req.user;
    console.log(`‚úÖ User data sent via /api/me: ${userWithoutPassword.username}`);
    console.log(`üì§ User object:`, JSON.stringify(userWithoutPassword));
    res.json(userWithoutPassword);
  } else {
    console.log(`‚ùå User not authenticated`);
    res.status(401).json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' });
  }
});

// Logout route
app.post('/api/logout', (req, res) => {
  console.log(`üìù Logout attempt for user: ${req.user?.username || 'unknown'}`);
  
  req.logout((err) => {
    if (err) {
      console.error('‚ùå Logout error:', err);
      return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞' });
    }
    
    req.session.destroy((err) => {
      if (err) {
        console.error('‚ùå Session destroy error:', err);
        return res.status(500).json({ error: '–û—à–∏–±–∫–∞ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏' });
      }
      
      console.log(`‚úÖ Logout successful and session destroyed`);
      res.json({ message: '–í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ' });
    });
  });
});

// Cars routes
app.get('/api/cars', async (req, res) => {
  try {
    console.log(`üìù GET /api/cars - User: ${req.user?.username || 'anonymous'} - Fetching all cars`);
    const cars = await storage.getAllCars();
    console.log(`üìã Found ${cars.length} cars`);
    console.log(`üì§ Cars data:`, cars.map(car => `${car.id}: ${car.name}`));
    res.json(cars);
  } catch (error) {
    console.error('‚ùå Error fetching cars:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π' });
  }
});

app.get('/api/cars/search', async (req, res) => {
  try {
    const { query, category, server } = req.query;
    console.log(`üìù GET /api/cars/search - Query: ${query}, Category: ${category}, Server: ${server}`);
    
    const cars = await storage.searchCars(query, category, server);
    console.log(`üìã Search found ${cars.length} cars`);
    res.json(cars);
  } catch (error) {
    console.error('‚ùå Error searching cars:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π' });
  }
});

app.get('/api/cars/my', async (req, res) => {
  console.log(`üìù GET /api/cars/my - User: ${req.user?.username || 'not authenticated'}`);
  
  if (!req.user) {
    console.log(`‚ùå User not authenticated for /api/cars/my`);
    return res.status(401).json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' });
  }

  try {
    const cars = await storage.getCarsByUser(req.user.id);
    console.log(`üìã User ${req.user.username} has ${cars.length} cars`);
    res.json(cars);
  } catch (error) {
    console.error('‚ùå Error fetching user cars:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' });
  }
});

app.get('/api/cars/:id', async (req, res) => {
  try {
    const carId = parseInt(req.params.id);
    console.log(`üìù GET /api/cars/${carId} - Fetching car details`);
    
    const car = await storage.getCar(carId);
    if (!car) {
      console.log(`‚ùå Car not found: ${carId}`);
      return res.status(404).json({ error: '–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    console.log(`‚úÖ Found car: ${car.name}`);
    res.json(car);
  } catch (error) {
    console.error('‚ùå Error fetching car:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è' });
  }
});

app.post('/api/cars', async (req, res) => {
  console.log(`üìù POST /api/cars - User: ${req.user?.username || 'not authenticated'}`);
  
  if (!req.user) {
    console.log(`‚ùå User not authenticated for car creation`);
    return res.status(401).json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' });
  }

  try {
    const carData = {
      ...req.body,
      createdBy: req.user.id,
    };
    
    console.log(`üìù Creating car: ${carData.name}`);
    const car = await storage.createCar(carData);
    console.log(`‚úÖ Car created with ID: ${car.id}`);
    res.status(201).json(car);
  } catch (error) {
    console.error('‚ùå Error creating car:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è' });
  }
});

app.put('/api/cars/:id', async (req, res) => {
  console.log(`üìù PUT /api/cars/${req.params.id} - User: ${req.user?.username || 'not authenticated'}`);
  
  if (!req.user) {
    console.log(`‚ùå User not authenticated for car update`);
    return res.status(401).json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' });
  }

  try {
    const carId = parseInt(req.params.id);
    const car = await storage.getCar(carId);
    
    if (!car) {
      console.log(`‚ùå Car not found for update: ${carId}`);
      return res.status(404).json({ error: '–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    if (car.createdBy !== req.user.id && req.user.role !== 'admin') {
      console.log(`‚ùå Access denied for car update: ${carId}`);
      return res.status(403).json({ error: '–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è' });
    }

    const updatedCar = await storage.updateCar(carId, req.body);
    console.log(`‚úÖ Car updated: ${carId}`);
    res.json(updatedCar);
  } catch (error) {
    console.error('‚ùå Error updating car:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è' });
  }
});

app.delete('/api/cars/:id', async (req, res) => {
  console.log(`üìù DELETE /api/cars/${req.params.id} - User: ${req.user?.username || 'not authenticated'}`);
  
  if (!req.user) {
    console.log(`‚ùå User not authenticated for car deletion`);
    return res.status(401).json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' });
  }

  try {
    const carId = parseInt(req.params.id);
    const car = await storage.getCar(carId);
    
    if (!car) {
      console.log(`‚ùå Car not found for deletion: ${carId}`);
      return res.status(404).json({ error: '–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    if (car.createdBy !== req.user.id && req.user.role !== 'admin') {
      console.log(`‚ùå Access denied for car deletion: ${carId}`);
      return res.status(403).json({ error: '–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç—Ç–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è' });
    }

    const deleted = await storage.deleteCar(carId);
    if (deleted) {
      console.log(`‚úÖ Car deleted: ${carId}`);
      res.json({ message: '–ê–≤—Ç–æ–º–æ–±–∏–ª—å —É–¥–∞–ª–µ–Ω' });
    } else {
      console.log(`‚ùå Failed to delete car: ${carId}`);
      res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å' });
    }
  } catch (error) {
    console.error('‚ùå Error deleting car:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è' });
  }
});

// Messages routes
app.get('/api/messages/unread-count', async (req, res) => {
  console.log(`üìù GET /api/messages/unread-count - User: ${req.user?.username || 'not authenticated'}`);
  
  if (!req.user) {
    console.log(`‚ùå User not authenticated for unread count`);
    return res.status(401).json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' });
  }

  try {
    const count = await storage.getUnreadMessageCount(req.user.id);
    console.log(`üìã User ${req.user.username} has ${count} unread messages`);
    res.json({ count });
  } catch (error) {
    console.error('‚ùå Error fetching unread count:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π' });
  }
});

// Favorites routes
app.get('/api/favorites', async (req, res) => {
  console.log(`üìù GET /api/favorites - User: ${req.user?.username || 'not authenticated'}`);
  
  if (!req.user) {
    console.log(`‚ùå User not authenticated for favorites`);
    return res.status(401).json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' });
  }

  try {
    const favorites = await storage.getFavoritesByUser(req.user.id);
    console.log(`üìã User ${req.user.username} has ${favorites.length} favorites`);
    res.json(favorites);
  } catch (error) {
    console.error('‚ùå Error fetching favorites:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ' });
  }
});

app.get('/api/favorites/check', async (req, res) => {
  console.log(`üìù GET /api/favorites/check - User: ${req.user?.username || 'not authenticated'}`);
  
  if (!req.user) {
    console.log(`‚ùå User not authenticated for favorites check`);
    return res.status(401).json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' });
  }

  try {
    const { carId } = req.query;
    if (!carId) {
      return res.status(400).json({ error: '–ù–µ —É–∫–∞–∑–∞–Ω ID –∞–≤—Ç–æ–º–æ–±–∏–ª—è' });
    }
    
    const isFavorite = await storage.isFavorite(req.user.id, parseInt(carId));
    console.log(`üìã Car ${carId} is favorite for user ${req.user.username}: ${isFavorite}`);
    res.json({ isFavorite });
  } catch (error) {
    console.error('‚ùå Error checking favorite:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ' });
  }
});

// Applications routes
app.get('/api/my-applications', async (req, res) => {
  console.log(`üìù GET /api/my-applications - User: ${req.user?.username || 'not authenticated'}`);
  
  if (!req.user) {
    console.log(`‚ùå User not authenticated for applications`);
    return res.status(401).json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' });
  }

  try {
    const applications = await storage.getCarApplicationsByUser(req.user.id);
    console.log(`üìã User ${req.user.username} has ${applications.length} applications`);
    res.json(applications);
  } catch (error) {
    console.error('‚ùå Error fetching applications:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫' });
  }
});

console.log("üîß Setting up static files...");

// Serve static files
app.use(express.static('public'));

// Catch-all handler for SPA (MUST BE LAST!)
app.get('*', (req, res) => {
  console.log(`üìù Serving SPA for route: ${req.path}`);
  res.sendFile(path.join(process.cwd(), 'public', 'index.html'));
});

console.log("üîß About to start listening on port:", process.env.PORT || 3000);
console.log("üéØ Server setup complete, waiting for connections...");

const PORT = process.env.PORT || 3000;
app.listen(PORT, '0.0.0.0', () => {
  console.log(`‚úÖ Server successfully running on port ${PORT}`);
  console.log(`üåê Server listening on 0.0.0.0:${PORT}`);
});
