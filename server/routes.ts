import type { Express } from "express";
import { createServer, type Server } from "http";
import { WebSocketServer, WebSocket } from "ws";

// –î–µ–∫–ª–∞—Ä–∞—Ü–∏—è —Ç–∏–ø–æ–≤ –¥–ª—è global —Ñ—É–Ω–∫—Ü–∏–∏
declare global {
  var sendNotification: (userId: number, notification: any) => void;
}
import { setupAuth } from "./auth";
import { storage } from "./storage";
import { insertCarSchema, insertCarApplicationSchema } from "@shared/schema";
import { z } from "zod";

// –°–∏—Å—Ç–µ–º–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
interface ModerationResult {
  allowed: boolean;
  reason?: string;
  cleanContent: string;
}

function moderateMessage(content: string): ModerationResult {
  const message = content.toLowerCase();
  
  // –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ (–º–∞—Ç, –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è)
  const profanity = [
    '–±–ª—è–¥—å', '—Å—É–∫–∞', '–ø–∏–∑–¥–∞', '—Ö—É–π', '–µ–±–∞—Ç—å', '–≥–∞–≤–Ω–æ', '–≥–æ–≤–Ω–æ', '–¥–µ—Ä—å–º–æ',
    '–∫–æ–∑–µ–ª', '–∫–æ–∑—ë–ª', '–¥–µ–±–∏–ª', '–∏–¥–∏–æ—Ç', '—Ç–≤–∞—Ä—å', '—É–µ–±–∞–Ω', '—É—ë–±–∞–Ω',
    '–º—Ä–∞–∑—å', '–≥–Ω–∏–¥–∞', '–ø–∞–¥–ª–∞', '—Å–≤–æ–ª–æ—á—å', '—É–±–ª—é–¥–æ–∫', '–º—É–¥–∞–∫', '–¥—É—Ä–∞–∫'
  ];
  
  // –ü–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã
  const political = [
    '–ø—É—Ç–∏–Ω', '–∑–µ–ª–µ–Ω—Å–∫–∏–π', 'biden', '—É–∫—Ä–∞–∏–Ω–∞', '—Ä–æ—Å—Å–∏—è',
    '–≤–æ–π–Ω–∞', '—Å–∞–Ω–∫—Ü–∏–∏', '–ø–æ–ª–∏—Ç–∏–∫–∞', '–≤—ã–±–æ—Ä—ã', '–ø—Ä–µ–∑–∏–¥–µ–Ω—Ç'
  ];
  
  // –ú–µ–∂–Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ä–æ–∑–Ω—å
  const ethnic = [
    '—Ö–æ—Ö–æ–ª', '–º–æ—Å–∫–∞–ª—å', '—Ä—É—Å–Ω—è', '—É–∫—Ä–æ–ø', '–≤–∞—Ç–Ω–∏–∫', '–±–∞–Ω–¥–µ—Ä–∞',
    '–∫–∞—Ü–∞–ø', '–∞–º–µ—Ä–∏–∫–æ—Å', '–ø–∏–Ω–¥–æ—Å', '–Ω–µ–≥—Ä', '–∞–∑–∏–∞—Ç'
  ];
  
  // –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã
  const links = [
    'http://', 'https://', 'www.', '.com', '.ru', '.ua', '.org',
    'telegram', 'whatsapp', 'viber', 'skype', '+7', '+380', '+1'
  ];
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∞—Ç
  for (const word of profanity) {
    if (message.includes(word)) {
      return {
        allowed: false,
        reason: "–Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è",
        cleanContent: content
      };
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–ª–∏—Ç–∏–∫—É
  for (const word of political) {
    if (message.includes(word)) {
      return {
        allowed: false,
        reason: "–ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ–º—ã –∑–∞–ø—Ä–µ—â–µ–Ω—ã",
        cleanContent: content
      };
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–µ–∂–Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é —Ä–æ–∑–Ω—å
  for (const word of ethnic) {
    if (message.includes(word)) {
      return {
        allowed: false,
        reason: "–º–µ–∂–Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ä–æ–∑–Ω—å –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–∞",
        cleanContent: content
      };
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Å—ã–ª–∫–∏ –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã
  for (const link of links) {
    if (message.includes(link)) {
      return {
        allowed: false,
        reason: "—Å—Å—ã–ª–∫–∏ –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –∑–∞–ø—Ä–µ—â–µ–Ω—ã –≤ —á–∞—Ç–µ",
        cleanContent: content
      };
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º (–ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã)
  if (/(.)\1{4,}/.test(message)) {
    return {
      allowed: false,
      reason: "—Å–ø–∞–º –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º",
      cleanContent: content
    };
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
  if (content.length > 500) {
    return {
      allowed: false,
      reason: "—Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤)",
      cleanContent: content
    };
  }
  
  return {
    allowed: true,
    cleanContent: content
  };
}

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
function requireAuth(req: any, res: any, next: any) {
  if (!req.isAuthenticated()) {
    return res.status(401).json({ message: "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è" });
  }
  next();
}

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏
function requireRole(roles: string[]) {
  return (req: any, res: any, next: any) => {
    if (!req.isAuthenticated()) {
      return res.status(401).json({ message: "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è" });
    }
    if (!roles.includes(req.user.role)) {
      return res.status(403).json({ message: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞" });
    }
    next();
  };
}

export function registerRoutes(app: Express): Server {
  // –î–æ–±–∞–≤–ª—è–µ–º debug middleware –¥–ª—è –≤—Å–µ—Ö API –∑–∞–ø—Ä–æ—Å–æ–≤
  app.use('/api', (req, res, next) => {
    console.log(`üîç API –∑–∞–ø—Ä–æ—Å: ${req.method} ${req.originalUrl} ${req.url}`);
    next();
  });

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  setupAuth(app);

  // –†–û–£–¢ –ú–û–î–ï–†–ê–¶–ò–ò –°–û–û–ë–©–ï–ù–ò–ô - –î–û–ë–ê–í–õ–ï–ù –í –ù–ê–ß–ê–õ–û
  app.get("/api/messages/all", requireAuth, async (req, res) => {
    console.log("üöÄ –†–û–£–¢ /api/messages/all –í–´–ü–û–õ–ù–Ø–ï–¢–°–Ø!");
    
    try {
      console.log(`üîç GET /api/messages/all - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${req.user!.id} ${req.user!.username} (${req.user!.role})`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å
      if (req.user!.role !== "moderator" && req.user!.role !== "admin") {
        console.log("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π");
        return res.status(403).json({ error: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤" });
      }
      
      console.log("üîç –í—ã–∑—ã–≤–∞–µ–º storage.getAllMessages()...");
      const messages = await storage.getAllMessages();
      console.log(`üìä –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏: ${messages.length}`);
      console.log(`üìã –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–π:`, JSON.stringify(messages, null, 2));
      res.json(messages);
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:", error);
      res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π" });
    }
  });

  // –¢–ï–°–¢–û–í–´–ô –†–û–£–¢ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
  app.get("/api/debug/messages", async (req, res) => {
    console.log("üîß –¢–ï–°–¢–û–í–´–ô –†–û–£–¢ –í–´–ü–û–õ–ù–Ø–ï–¢–°–Ø!");
    try {
      const messages = await storage.getAllMessages();
      console.log(`üîß –í –±–∞–∑–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${messages.length}`);
      res.json({ 
        count: messages.length, 
        messages: messages,
        debug: "test route working"
      });
    } catch (error) {
      console.error("üîß –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–æ—É—Ç–µ:", error);
      res.status(500).json({ error: error });
    }
  });

  // –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ API –∑–∞–ø—Ä–æ—Å–æ–≤
  app.use('/api/*', (req, res, next) => {
    console.log(`API Request: ${req.method} ${req.path}`);
    next();
  });

  // Cars routes
  app.get("/api/cars", async (req, res) => {
    try {
      const { search, category, server } = req.query;
      const cars = await storage.searchCars(
        search as string || "",
        category === "all" ? undefined : category as string,
        server === "all" ? undefined : server as string
      );
      res.json(cars);
    } catch (error) {
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π" });
    }
  });

  app.get("/api/cars/:id", async (req, res) => {
    try {
      const id = parseInt(req.params.id);
      const car = await storage.getCar(id);
      if (!car) {
        return res.status(404).json({ message: "–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }
      res.json(car);
    } catch (error) {
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è" });
    }
  });

  app.get("/api/my-cars", requireAuth, async (req, res) => {
    try {
      const cars = await storage.getCarsByUser(req.user!.id);
      res.json(cars);
    } catch (error) {
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞—à–∏—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π" });
    }
  });

  app.put("/api/cars/:id", requireRole(["moderator", "admin"]), async (req, res) => {
    try {
      const id = parseInt(req.params.id);
      const validation = insertCarSchema.safeParse(req.body);
      
      if (!validation.success) {
        return res.status(400).json({ message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è" });
      }

      const car = await storage.updateCar(id, validation.data);
      if (!car) {
        return res.status(404).json({ message: "–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }
      
      res.json(car);
    } catch (error) {
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è" });
    }
  });

  // –°–Ω—è—Ç–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è —Å –ø—Ä–æ–¥–∞–∂–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
  app.delete("/api/my-cars/:id", requireAuth, async (req, res) => {
    try {
      const id = parseInt(req.params.id);
      console.log(`üöó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${req.user!.id} (${req.user!.username}) —Å–Ω–∏–º–∞–µ—Ç —Å –ø—Ä–æ–¥–∞–∂–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—å ID: ${id}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—å –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      const car = await storage.getCar(id);
      if (!car) {
        console.log("‚ùå –ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
        return res.status(404).json({ message: "–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }
      
      if (car.createdBy !== req.user!.id) {
        console.log("‚ùå –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å —á—É–∂–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å");
        return res.status(403).json({ message: "–í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏" });
      }
      
      // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç—Ç–∏–º –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–º
      console.log(`üóëÔ∏è –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è ID: ${id}`);
      const allMessages = await storage.getAllMessages();
      const messagesToDelete = allMessages.filter((msg: any) => msg.carId === id);
      
      for (const message of messagesToDelete) {
        await storage.deleteMessage(message.id);
        console.log(`üì® –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ ID: ${message.id}`);
      }
      
      // –£–¥–∞–ª—è–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      console.log(`‚ù§Ô∏è –£–¥–∞–ª—è–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
      // –≠—Ç–æ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
      
      // –£–¥–∞–ª—è–µ–º —Å–∞–º –∞–≤—Ç–æ–º–æ–±–∏–ª—å
      const deleted = await storage.deleteCar(id);
      if (!deleted) {
        console.log("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è");
        return res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è" });
      }
      
      console.log(`‚úÖ –ê–≤—Ç–æ–º–æ–±–∏–ª—å ${car.name} —É—Å–ø–µ—à–Ω–æ —Å–Ω—è—Ç —Å –ø—Ä–æ–¥–∞–∂–∏`);
      res.status(200).json({ 
        message: `–ê–≤—Ç–æ–º–æ–±–∏–ª—å "${car.name}" —Å–Ω—è—Ç —Å –ø—Ä–æ–¥–∞–∂–∏. –í—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏ —É–¥–∞–ª–µ–Ω—ã.` 
      });
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è —Å –ø—Ä–æ–¥–∞–∂–∏:", error);
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è —Å –ø—Ä–æ–¥–∞–∂–∏" });
    }
  });

  app.delete("/api/cars/:id", requireRole(["moderator", "admin"]), async (req, res) => {
    try {
      const id = parseInt(req.params.id);
      const deleted = await storage.deleteCar(id);
      
      if (!deleted) {
        return res.status(404).json({ message: "–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }
      
      res.sendStatus(204);
    } catch (error) {
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è" });
    }
  });

  // Car Applications routes
  app.post("/api/car-applications", requireAuth, async (req, res) => {
    try {
      const validation = insertCarApplicationSchema.safeParse({
        ...req.body,
        createdBy: req.user!.id,
      });
      
      if (!validation.success) {
        return res.status(400).json({ message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏" });
      }

      const application = await storage.createCarApplication(validation.data);
      res.status(201).json(application);
    } catch (error) {
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏" });
    }
  });

  app.get("/api/my-applications", requireAuth, async (req, res) => {
    try {
      const applications = await storage.getCarApplicationsByUser(req.user!.id);
      res.json(applications);
    } catch (error) {
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞—à–∏—Ö –∑–∞—è–≤–æ–∫" });
    }
  });

  app.get("/api/applications", requireRole(["moderator", "admin"]), async (req, res) => {
    try {
      const applications = await storage.getAllCarApplications();
      res.json(applications);
    } catch (error) {
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫" });
    }
  });

  app.get("/api/applications/pending", requireRole(["moderator", "admin"]), async (req, res) => {
    try {
      const applications = await storage.getPendingCarApplications();
      res.json(applications);
    } catch (error) {
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é" });
    }
  });

  app.patch("/api/applications/:id", requireRole(["moderator", "admin"]), async (req, res) => {
    try {
      const id = parseInt(req.params.id);
      const { status } = req.body;
      
      const statusSchema = z.enum(["approved", "rejected"]);
      const validation = statusSchema.safeParse(status);
      
      if (!validation.success) {
        return res.status(400).json({ message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å" });
      }

      const application = await storage.updateCarApplicationStatus(id, validation.data, req.user!.id);
      if (!application) {
        return res.status(404).json({ message: "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });
      }
      
      res.json(application);
    } catch (error) {
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏" });
    }
  });

  // Favorites routes
  app.get("/api/favorites", requireAuth, async (req, res) => {
    try {
      const favorites = await storage.getFavoritesByUser(req.user!.id);
      const favoriteCarIds = favorites.map(f => f.carId);
      const cars = [];
      
      for (const carId of favoriteCarIds) {
        const car = await storage.getCar(carId);
        if (car) cars.push(car);
      }
      
      res.json(cars);
    } catch (error) {
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ" });
    }
  });

  app.post("/api/favorites", requireAuth, async (req, res) => {
    try {
      const { carId } = req.body;
      const carIdSchema = z.number().int().positive();
      const validation = carIdSchema.safeParse(carId);
      
      if (!validation.success) {
        return res.status(400).json({ message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∞–≤—Ç–æ–º–æ–±–∏–ª—è" });
      }

      const car = await storage.getCar(validation.data);
      if (!car) {
        return res.status(404).json({ message: "–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      const isFavorite = await storage.isFavorite(req.user!.id, validation.data);
      if (isFavorite) {
        return res.status(400).json({ message: "–ê–≤—Ç–æ–º–æ–±–∏–ª—å —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º" });
      }

      const favorite = await storage.addToFavorites({
        userId: req.user!.id,
        carId: validation.data,
      });
      
      res.status(201).json(favorite);
    } catch (error) {
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ" });
    }
  });

  app.delete("/api/favorites/:carId", requireAuth, async (req, res) => {
    try {
      const carId = parseInt(req.params.carId);
      const removed = await storage.removeFromFavorites(req.user!.id, carId);
      
      if (!removed) {
        return res.status(404).json({ message: "–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º" });
      }
      
      res.sendStatus(204);
    } catch (error) {
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ" });
    }
  });

  app.get("/api/favorites/check/:carId", requireAuth, async (req, res) => {
    try {
      const carId = parseInt(req.params.carId);
      const isFavorite = await storage.isFavorite(req.user!.id, carId);
      res.json({ isFavorite });
    } catch (error) {
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ" });
    }
  });

  app.post("/api/favorites/toggle/:carId", requireAuth, async (req, res) => {
    try {
      const carId = parseInt(req.params.carId);
      const car = await storage.getCar(carId);
      
      if (!car) {
        return res.status(404).json({ message: "–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      const isFavorite = await storage.isFavorite(req.user!.id, carId);
      
      if (isFavorite) {
        // –£–¥–∞–ª—è–µ–º –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
        await storage.removeFromFavorites(req.user!.id, carId);
        res.json({ action: "removed", isFavorite: false });
      } else {
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
        await storage.addToFavorites({
          userId: req.user!.id,
          carId: carId,
        });
        res.json({ action: "added", isFavorite: true });
      }
    } catch (error) {
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ" });
    }
  });

  // User management routes (admin only)
  app.get("/api/users", requireRole(["admin"]), async (req, res) => {
    try {
      const users = await storage.getAllUsers();
      // –ò—Å–∫–ª—é—á–∞–µ–º –ø–∞—Ä–æ–ª–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞
      const safeUsers = users.map(({ password, ...user }) => user);
      res.json(safeUsers);
    } catch (error) {
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π" });
    }
  });

  // Update user (admin only) - –í–ê–ñ–ù–û: —ç—Ç–æ—Ç –º–∞—Ä—à—Ä—É—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ü–ï–†–ï–î /role –º–∞—Ä—à—Ä—É—Ç–æ–º
  app.patch("/api/users/:id", requireAuth, requireRole(["admin"]), async (req, res) => {
    console.log('üîß PATCH /api/users/:id - –ó–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω', req.params.id, req.body);
    try {
      const userId = parseInt(req.params.id);
      const { username, role } = req.body;
      
      if (!username || !role) {
        return res.status(400).json({ message: "–£–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ä–æ–ª—å" });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      const existingUser = await storage.getUser(userId);
      if (!existingUser) {
        return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –∑–∞–Ω—è—Ç–æ (–µ—Å–ª–∏ –æ–Ω–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å)
      if (username !== existingUser.username) {
        const userWithSameName = await storage.getUserByUsername(username);
        if (userWithSameName && userWithSameName.id !== userId) {
          return res.status(400).json({ message: "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –∑–∞–Ω—è—Ç–æ" });
        }
      }

      const updatedUser = await storage.updateUser(userId, { username, role });
      if (!updatedUser) {
        return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      const safeUser = {
        id: updatedUser.id,
        username: updatedUser.username,
        role: updatedUser.role,
        createdAt: typeof updatedUser.createdAt === 'string' ? updatedUser.createdAt : updatedUser.createdAt.toISOString()
      };
      console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', safeUser);
      res.setHeader('Content-Type', 'application/json');
      res.json(safeUser);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" });
    }
  });

  // Delete user (admin only)
  app.delete("/api/users/:id", requireAuth, requireRole(["admin"]), async (req, res) => {
    try {
      const userId = parseInt(req.params.id);
      
      // –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è
      if (userId === req.user!.id) {
        return res.status(400).json({ message: "–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç" });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
      const userToDelete = await storage.getUser(userId);
      if (!userToDelete) {
        return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—ç—Ç–æ —Ç–∞–∫–∂–µ —É–¥–∞–ª–∏—Ç –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
      const deleted = await storage.deleteUser(userId);
      if (!deleted) {
        return res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" });
      }

      console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userToDelete.username} (ID: ${userId}) –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã`);
      res.json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã" });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" });
    }
  });

  // Update user role only (admin only) - –ü–û–°–õ–ï –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  app.patch("/api/users/:id/role", requireAuth, requireRole(["admin"]), async (req, res) => {
    try {
      const id = parseInt(req.params.id);
      const { role } = req.body;
      
      const roleSchema = z.enum(["user", "moderator", "admin"]);
      const validation = roleSchema.safeParse(role);
      
      if (!validation.success) {
        return res.status(400).json({ message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ä–æ–ª—å" });
      }

      const user = await storage.updateUserRole(id, validation.data);
      if (!user) {
        return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }
      
      const { password, ...safeUser } = user;
      res.json(safeUser);
    } catch (error) {
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" });
    }
  });

  // Messages API routes
  app.get("/api/messages", requireAuth, async (req, res) => {
    console.log("üîç GET /api/messages - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:", req.user?.id, req.user?.username);
    
    if (!req.user) {
      console.log("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
      return res.status(401).json({ message: "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è" });
    }
    
    try {
      const messages = await storage.getMessagesByUser(req.user.id);
      console.log("‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π:", messages.length);
      res.json(messages);
    } catch (error: any) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤:", error.message);
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –≤–º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–µ–ª—ã—Ö –ø–æ–ª–æ—Å
      res.json([]);
    }
  });

  app.post("/api/messages", requireAuth, async (req, res) => {
    try {
      console.log("üîç POST /api/messages - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:", req.user?.id, req.user?.username);
      console.log("üîç POST /api/messages - –î–∞–Ω–Ω—ã–µ:", req.body);
      
      const { carId, sellerId, message } = req.body;
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
      if (!carId || !sellerId || !message) {
        console.log("‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è");
        return res.status(400).json({ message: "–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
      }
      
      const carIdNum = parseInt(carId);
      const sellerIdNum = parseInt(sellerId);
      
      if (isNaN(carIdNum) || isNaN(sellerIdNum)) {
        console.log("‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ ID");
        return res.status(400).json({ message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ ID" });
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      const car = await storage.getCar(carIdNum);
      if (!car) {
        console.log("‚ùå –ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω:", carIdNum);
        return res.status(404).json({ message: "–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }
      
      console.log("üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–∞–π–¥–µ–Ω:", car.name, "–≤–ª–∞–¥–µ–ª–µ—Ü:", car.createdBy);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–∏—à–µ—Ç —Å–∞–º —Å–µ–±–µ
      if (req.user!.id === sellerIdNum) {
        console.log("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—ã—Ç–∞–µ—Ç—Å—è –ø–∏—Å–∞—Ç—å —Å–∞–º–æ–º—É —Å–µ–±–µ");
        return res.status(400).json({ message: "–ù–µ–ª—å–∑—è –ø–∏—Å–∞—Ç—å —Å–∞–º–æ–º—É —Å–µ–±–µ" });
      }
      
      // –ú–æ–¥–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
      const moderationResult = moderateMessage(message.trim());
      if (!moderationResult.allowed) {
        console.log("üö´ –°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ:", moderationResult.reason);
        return res.status(400).json({ 
          message: `–°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: ${moderationResult.reason}`,
          blocked: true 
        });
      }
      
      console.log("‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç", req.user!.id, "–∫", sellerIdNum);
      
      const newMessage = await storage.sendMessage({
        carId: carIdNum,
        buyerId: req.user!.id,
        sellerId: sellerIdNum,
        senderId: req.user!.id,
        recipientId: sellerIdNum,
        content: moderationResult.cleanContent,
      });
      
      console.log("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:", newMessage.id);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
      if (global.sendNotification) {
        const senderName = req.user!.username;
        global.sendNotification(sellerIdNum, {
          type: "new_message",
          data: {
            carId: carIdNum,
            carName: car.name,
            senderName: senderName,
            message: message.trim(),
          }
        });
        console.log("üì® Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:", sellerIdNum);
      }
      
      res.status(201).json(newMessage);
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è" });
    }
  });



  app.get("/api/messages", requireAuth, async (req, res) => {
    console.log("üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ /api/messages –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", req.user!.id);
    
    // –û—Ç–∫–ª—é—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—Ä–∞–Ω–µ–µ
    res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');
    res.setHeader('Pragma', 'no-cache');
    res.setHeader('Expires', '0');
    
    try {
      let messages;
      
      // –ï—Å–ª–∏ —ç—Ç–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –∏–ª–∏ –∞–¥–º–∏–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è
      if (req.user!.role === "moderator" || req.user!.role === "admin") {
        console.log("üëÆ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä/–ê–¥–º–∏–Ω –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è");
        messages = await storage.getAllMessages();
        console.log("üì® –ü–æ–ª—É—á–µ–Ω–æ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏:", messages.length);
      } else {
        // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - —Ç–æ–ª—å–∫–æ –∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è
        console.log("üë§ –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è");
        messages = await storage.getMessagesByUser(req.user!.id);
        console.log("üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", messages.length);
      }
      
      // –û–±–æ–≥–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è—Ö
      const enrichedMessages = [];
      for (const message of messages) {
        const car = await storage.getCar(message.carId);
        const buyer = await storage.getUser(message.buyerId);
        const seller = await storage.getUser(message.sellerId);
        
        enrichedMessages.push({
          ...message,
          carName: car?.name || null,
          buyerName: buyer?.username || null,
          sellerName: seller?.username || null,
        });
      }
      
      console.log("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–æ–≥–∞—â–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", enrichedMessages.length);
      res.json(enrichedMessages);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:", error);
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –≤–º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
      res.json([]);
    }
  });

  app.get("/api/messages/unread-count", requireAuth, async (req, res) => {
    try {
      const count = await storage.getUnreadMessagesCount(req.user!.id);
      res.json({ count });
    } catch (error) {
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—á–µ—Ç—á–∏–∫–∞" });
    }
  });

  // –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –∞–¥–º–∏–Ω–æ–≤)
  app.post("/api/admin/remove-message", requireAuth, requireRole(["moderator", "admin"]), async (req, res) => {
    console.log(`üöÄüöÄüöÄ ADMIN DELETE MESSAGE –ó–ê–ü–†–û–° –ü–û–õ–£–ß–ï–ù! üöÄüöÄüöÄ`);
    console.log(`üìù Body:`, req.body);
    console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:`, req.user?.id, req.user?.username, req.user?.role);
    
    try {
      const messageId = parseInt(req.body.messageId);
      console.log(`üóëÔ∏è DELETE message ${messageId} - –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: ${req.user!.id} ${req.user!.username}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –î–û —É–¥–∞–ª–µ–Ω–∏—è
      const messagesBefore = await storage.getAllMessages();
      console.log(`üìä –°–æ–æ–±—â–µ–Ω–∏–π –î–û —É–¥–∞–ª–µ–Ω–∏—è: ${messagesBefore.length}`);
      const targetMessage = messagesBefore.find(m => m.id === messageId);
      console.log(`üéØ –¶–µ–ª–µ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:`, targetMessage);
      
      const success = await storage.deleteMessage(messageId);
      console.log(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è:`, success);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ü–û–°–õ–ï —É–¥–∞–ª–µ–Ω–∏—è
      const messagesAfter = await storage.getAllMessages();
      console.log(`üìä –°–æ–æ–±—â–µ–Ω–∏–π –ü–û–°–õ–ï —É–¥–∞–ª–µ–Ω–∏—è: ${messagesAfter.length}`);
      
      if (success) {
        console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ ${messageId} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ`);
        res.json({ success: true });
      } else {
        console.log(`‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ ${messageId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
        res.status(404).json({ error: "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ" });
      }
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
      res.status(500).json({ error: "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è" });
    }
  });

  // –û—Ç–º–µ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö
  app.post("/api/messages/mark-read", requireAuth, async (req, res) => {
    console.log("üöÄ POST /api/messages/mark-read - –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏");
    console.log("üì• –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:", req.body);
    console.log("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:", req.user?.id, req.user?.username);
    
    try {
      const { carId, buyerId, sellerId } = req.body;
      const userId = req.user!.id;
      
      console.log("üîç –û—Ç–º–µ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö:", { carId, buyerId, sellerId, userId });
      
      if (!carId || !buyerId || !sellerId) {
        console.log("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã");
        return res.status(400).json({ error: "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã" });
      }
      
      const markedCount = await storage.markConversationAsRead(carId, buyerId, sellerId, userId);
      res.json({ success: true, markedCount });
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö:", error);
      res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", details: error.message });
    }
  });

  const httpServer = createServer(app);

  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º WebSocket —Å–µ—Ä–≤–µ—Ä –¥–ª—è push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  const wss = new WebSocketServer({ server: httpServer, path: '/ws' });
  
  // –•—Ä–∞–Ω–∏–º –∞–∫—Ç–∏–≤–Ω—ã–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const userConnections = new Map<number, WebSocket>();
  
  // –•—Ä–∞–Ω–∏–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–æ–Ω–ª–∞–π–Ω/–æ—Ñ—Ñ–ª–∞–π–Ω)
  const userStatus = new Map<number, { isOnline: boolean; lastSeen: Date }>();

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
  function broadcastUserStatus(userId: number, isOnline: boolean) {
    const statusUpdate = {
      type: 'user_status_update',
      data: {
        userId,
        isOnline,
        lastSeen: userStatus.get(userId)?.lastSeen || new Date()
      }
    };

    userConnections.forEach((connection, connectedUserId) => {
      if (connection.readyState === WebSocket.OPEN) {
        try {
          connection.send(JSON.stringify(statusUpdate));
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        }
      }
    });
  }

  wss.on('connection', (ws) => {
    console.log('üì° –ù–æ–≤–æ–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ');
    
    ws.on('message', (data) => {
      try {
        const message = JSON.parse(data.toString());
        
        if (message.type === 'authenticate' && message.userId) {
          // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          userConnections.set(message.userId, ws);
          userStatus.set(message.userId, { isOnline: true, lastSeen: new Date() });
          console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${message.userId} –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ WebSocket`);
          
          // –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
          broadcastUserStatus(message.userId, true);
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      }
    });

    ws.on('close', () => {
      // –£–¥–∞–ª—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
      userConnections.forEach((connection, userId) => {
        if (connection === ws) {
          userConnections.delete(userId);
          userStatus.set(userId, { isOnline: false, lastSeen: new Date() });
          console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –æ—Ç–∫–ª—é—á–µ–Ω –æ—Ç WebSocket`);
          
          // –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
          broadcastUserStatus(userId, false);
        }
      });
    });

    ws.on('error', (error) => {
      console.error('WebSocket –æ—à–∏–±–∫–∞:', error);
    });
  });

  // API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  app.get("/api/users/status", requireAuth, async (req, res) => {
    try {
      const statusData: { [key: number]: { isOnline: boolean; lastSeen: Date } } = {};
      
      userStatus.forEach((status, userId) => {
        statusData[userId] = status;
      });
      
      res.json(statusData);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", error);
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π" });
    }
  });

  // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  global.sendNotification = (userId: number, notification: any) => {
    const connection = userConnections.get(userId);
    if (connection && connection.readyState === WebSocket.OPEN) {
      try {
        connection.send(JSON.stringify(notification));
        console.log(`üì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
      }
    }
  };

  return httpServer;
}
