import type { Express } from "express";
import { createServer, type Server } from "http";
import { WebSocketServer, WebSocket } from "ws";
import { setupAuth } from "./auth";
import { storage } from "./storage";
import { insertCarSchema, insertCarApplicationSchema } from "@shared/schema";
import { z } from "zod";

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
function requireAuth(req: any, res: any, next: any) {
  if (!req.isAuthenticated()) {
    return res.status(401).json({ message: "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è" });
  }
  next();
}

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏
function requireRole(roles: string[]) {
  return (req: any, res: any, next: any) => {
    if (!req.isAuthenticated()) {
      return res.status(401).json({ message: "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è" });
    }
    if (!roles.includes(req.user.role)) {
      return res.status(403).json({ message: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞" });
    }
    next();
  };
}

export function registerRoutes(app: Express): Server {
  // –î–æ–±–∞–≤–ª—è–µ–º debug middleware –¥–ª—è –≤—Å–µ—Ö API –∑–∞–ø—Ä–æ—Å–æ–≤
  app.use('/api', (req, res, next) => {
    console.log(`üîç API –∑–∞–ø—Ä–æ—Å: ${req.method} ${req.originalUrl} ${req.url}`);
    next();
  });

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  setupAuth(app);

  // –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ API –∑–∞–ø—Ä–æ—Å–æ–≤
  app.use('/api/*', (req, res, next) => {
    console.log(`API Request: ${req.method} ${req.path}`);
    next();
  });

  // Cars routes
  app.get("/api/cars", async (req, res) => {
    try {
      const { search, category, server } = req.query;
      const cars = await storage.searchCars(
        search as string || "",
        category === "all" ? undefined : category as string,
        server === "all" ? undefined : server as string
      );
      res.json(cars);
    } catch (error) {
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π" });
    }
  });

  app.get("/api/cars/:id", async (req, res) => {
    try {
      const id = parseInt(req.params.id);
      const car = await storage.getCar(id);
      if (!car) {
        return res.status(404).json({ message: "–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }
      res.json(car);
    } catch (error) {
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è" });
    }
  });

  app.get("/api/my-cars", requireAuth, async (req, res) => {
    try {
      const cars = await storage.getCarsByUser(req.user!.id);
      res.json(cars);
    } catch (error) {
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞—à–∏—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π" });
    }
  });

  app.put("/api/cars/:id", requireRole(["moderator", "admin"]), async (req, res) => {
    try {
      const id = parseInt(req.params.id);
      const validation = insertCarSchema.safeParse(req.body);
      
      if (!validation.success) {
        return res.status(400).json({ message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è" });
      }

      const car = await storage.updateCar(id, validation.data);
      if (!car) {
        return res.status(404).json({ message: "–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }
      
      res.json(car);
    } catch (error) {
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è" });
    }
  });

  app.delete("/api/cars/:id", requireRole(["moderator", "admin"]), async (req, res) => {
    try {
      const id = parseInt(req.params.id);
      const deleted = await storage.deleteCar(id);
      
      if (!deleted) {
        return res.status(404).json({ message: "–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }
      
      res.sendStatus(204);
    } catch (error) {
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è" });
    }
  });

  // Car Applications routes
  app.post("/api/car-applications", requireAuth, async (req, res) => {
    try {
      const validation = insertCarApplicationSchema.safeParse({
        ...req.body,
        createdBy: req.user!.id,
      });
      
      if (!validation.success) {
        return res.status(400).json({ message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏" });
      }

      const application = await storage.createCarApplication(validation.data);
      res.status(201).json(application);
    } catch (error) {
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏" });
    }
  });

  app.get("/api/my-applications", requireAuth, async (req, res) => {
    try {
      const applications = await storage.getCarApplicationsByUser(req.user!.id);
      res.json(applications);
    } catch (error) {
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞—à–∏—Ö –∑–∞—è–≤–æ–∫" });
    }
  });

  app.get("/api/applications", requireRole(["moderator", "admin"]), async (req, res) => {
    try {
      const applications = await storage.getAllCarApplications();
      res.json(applications);
    } catch (error) {
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫" });
    }
  });

  app.get("/api/applications/pending", requireRole(["moderator", "admin"]), async (req, res) => {
    try {
      const applications = await storage.getPendingCarApplications();
      res.json(applications);
    } catch (error) {
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é" });
    }
  });

  app.patch("/api/applications/:id", requireRole(["moderator", "admin"]), async (req, res) => {
    try {
      const id = parseInt(req.params.id);
      const { status } = req.body;
      
      const statusSchema = z.enum(["approved", "rejected"]);
      const validation = statusSchema.safeParse(status);
      
      if (!validation.success) {
        return res.status(400).json({ message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å" });
      }

      const application = await storage.updateCarApplicationStatus(id, validation.data, req.user!.id);
      if (!application) {
        return res.status(404).json({ message: "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });
      }
      
      res.json(application);
    } catch (error) {
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏" });
    }
  });

  // Favorites routes
  app.get("/api/favorites", requireAuth, async (req, res) => {
    try {
      const favorites = await storage.getFavoritesByUser(req.user!.id);
      const favoriteCarIds = favorites.map(f => f.carId);
      const cars = [];
      
      for (const carId of favoriteCarIds) {
        const car = await storage.getCar(carId);
        if (car) cars.push(car);
      }
      
      res.json(cars);
    } catch (error) {
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ" });
    }
  });

  app.post("/api/favorites", requireAuth, async (req, res) => {
    try {
      const { carId } = req.body;
      const carIdSchema = z.number().int().positive();
      const validation = carIdSchema.safeParse(carId);
      
      if (!validation.success) {
        return res.status(400).json({ message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∞–≤—Ç–æ–º–æ–±–∏–ª—è" });
      }

      const car = await storage.getCar(validation.data);
      if (!car) {
        return res.status(404).json({ message: "–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      const isFavorite = await storage.isFavorite(req.user!.id, validation.data);
      if (isFavorite) {
        return res.status(400).json({ message: "–ê–≤—Ç–æ–º–æ–±–∏–ª—å —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º" });
      }

      const favorite = await storage.addToFavorites({
        userId: req.user!.id,
        carId: validation.data,
      });
      
      res.status(201).json(favorite);
    } catch (error) {
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ" });
    }
  });

  app.delete("/api/favorites/:carId", requireAuth, async (req, res) => {
    try {
      const carId = parseInt(req.params.carId);
      const removed = await storage.removeFromFavorites(req.user!.id, carId);
      
      if (!removed) {
        return res.status(404).json({ message: "–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º" });
      }
      
      res.sendStatus(204);
    } catch (error) {
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ" });
    }
  });

  app.get("/api/favorites/check/:carId", requireAuth, async (req, res) => {
    try {
      const carId = parseInt(req.params.carId);
      const isFavorite = await storage.isFavorite(req.user!.id, carId);
      res.json({ isFavorite });
    } catch (error) {
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ" });
    }
  });

  app.post("/api/favorites/toggle/:carId", requireAuth, async (req, res) => {
    try {
      const carId = parseInt(req.params.carId);
      const car = await storage.getCar(carId);
      
      if (!car) {
        return res.status(404).json({ message: "–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      const isFavorite = await storage.isFavorite(req.user!.id, carId);
      
      if (isFavorite) {
        // –£–¥–∞–ª—è–µ–º –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
        await storage.removeFromFavorites(req.user!.id, carId);
        res.json({ action: "removed", isFavorite: false });
      } else {
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
        await storage.addToFavorites({
          userId: req.user!.id,
          carId: carId,
        });
        res.json({ action: "added", isFavorite: true });
      }
    } catch (error) {
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ" });
    }
  });

  // User management routes (admin only)
  app.get("/api/users", requireRole(["admin"]), async (req, res) => {
    try {
      const users = await storage.getAllUsers();
      // –ò—Å–∫–ª—é—á–∞–µ–º –ø–∞—Ä–æ–ª–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞
      const safeUsers = users.map(({ password, ...user }) => user);
      res.json(safeUsers);
    } catch (error) {
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π" });
    }
  });

  // Update user (admin only) - –í–ê–ñ–ù–û: —ç—Ç–æ—Ç –º–∞—Ä—à—Ä—É—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ü–ï–†–ï–î /role –º–∞—Ä—à—Ä—É—Ç–æ–º
  app.patch("/api/users/:id", requireAuth, requireRole(["admin"]), async (req, res) => {
    console.log('üîß PATCH /api/users/:id - –ó–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω', req.params.id, req.body);
    try {
      const userId = parseInt(req.params.id);
      const { username, role } = req.body;
      
      if (!username || !role) {
        return res.status(400).json({ message: "–£–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ä–æ–ª—å" });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      const existingUser = await storage.getUser(userId);
      if (!existingUser) {
        return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –∑–∞–Ω—è—Ç–æ (–µ—Å–ª–∏ –æ–Ω–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å)
      if (username !== existingUser.username) {
        const userWithSameName = await storage.getUserByUsername(username);
        if (userWithSameName && userWithSameName.id !== userId) {
          return res.status(400).json({ message: "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –∑–∞–Ω—è—Ç–æ" });
        }
      }

      const updatedUser = await storage.updateUser(userId, { username, role });
      if (!updatedUser) {
        return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      const safeUser = {
        id: updatedUser.id,
        username: updatedUser.username,
        role: updatedUser.role,
        createdAt: typeof updatedUser.createdAt === 'string' ? updatedUser.createdAt : updatedUser.createdAt.toISOString()
      };
      console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', safeUser);
      res.setHeader('Content-Type', 'application/json');
      res.json(safeUser);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" });
    }
  });

  // Delete user (admin only)
  app.delete("/api/users/:id", requireAuth, requireRole(["admin"]), async (req, res) => {
    try {
      const userId = parseInt(req.params.id);
      
      // –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è
      if (userId === req.user!.id) {
        return res.status(400).json({ message: "–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç" });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
      const userToDelete = await storage.getUser(userId);
      if (!userToDelete) {
        return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—ç—Ç–æ —Ç–∞–∫–∂–µ —É–¥–∞–ª–∏—Ç –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
      const deleted = await storage.deleteUser(userId);
      if (!deleted) {
        return res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" });
      }

      console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userToDelete.username} (ID: ${userId}) –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã`);
      res.json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã" });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" });
    }
  });

  // Update user role only (admin only) - –ü–û–°–õ–ï –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  app.patch("/api/users/:id/role", requireAuth, requireRole(["admin"]), async (req, res) => {
    try {
      const id = parseInt(req.params.id);
      const { role } = req.body;
      
      const roleSchema = z.enum(["user", "moderator", "admin"]);
      const validation = roleSchema.safeParse(role);
      
      if (!validation.success) {
        return res.status(400).json({ message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ä–æ–ª—å" });
      }

      const user = await storage.updateUserRole(id, validation.data);
      if (!user) {
        return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }
      
      const { password, ...safeUser } = user;
      res.json(safeUser);
    } catch (error) {
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" });
    }
  });

  // Messages API routes
  app.get("/api/messages", requireAuth, async (req, res) => {
    try {
      const messages = await storage.getMessagesByUser(req.user!.id);
      res.json(messages);
    } catch (error) {
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π" });
    }
  });

  app.post("/api/messages", requireAuth, async (req, res) => {
    try {
      console.log("üîç POST /api/messages - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:", req.user?.id, req.user?.username);
      console.log("üîç POST /api/messages - –î–∞–Ω–Ω—ã–µ:", req.body);
      
      const { carId, sellerId, message } = req.body;
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
      if (!carId || !sellerId || !message) {
        console.log("‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è");
        return res.status(400).json({ message: "–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
      }
      
      const carIdNum = parseInt(carId);
      const sellerIdNum = parseInt(sellerId);
      
      if (isNaN(carIdNum) || isNaN(sellerIdNum)) {
        console.log("‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ ID");
        return res.status(400).json({ message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ ID" });
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      const car = await storage.getCar(carIdNum);
      if (!car) {
        console.log("‚ùå –ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω:", carIdNum);
        return res.status(404).json({ message: "–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }
      
      console.log("üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–∞–π–¥–µ–Ω:", car.name, "–≤–ª–∞–¥–µ–ª–µ—Ü:", car.createdBy);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–∏—à–µ—Ç —Å–∞–º —Å–µ–±–µ
      if (req.user!.id === sellerIdNum) {
        console.log("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—ã—Ç–∞–µ—Ç—Å—è –ø–∏—Å–∞—Ç—å —Å–∞–º–æ–º—É —Å–µ–±–µ");
        return res.status(400).json({ message: "–ù–µ–ª—å–∑—è –ø–∏—Å–∞—Ç—å —Å–∞–º–æ–º—É —Å–µ–±–µ" });
      }
      
      console.log("‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç", req.user!.id, "–∫", sellerIdNum);
      
      const newMessage = await storage.sendMessage({
        carId: carIdNum,
        buyerId: req.user!.id,
        sellerId: sellerIdNum,
        message: message.trim(),
      });
      
      console.log("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:", newMessage.id);
      res.status(201).json(newMessage);
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è" });
    }
  });

  app.get("/api/messages", requireAuth, async (req, res) => {
    try {
      const messages = await storage.getMessagesByUser(req.user!.id);
      res.json(messages);
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:", error);
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π" });
    }
  });

  app.get("/api/messages/unread-count", requireAuth, async (req, res) => {
    try {
      const count = await storage.getUnreadMessagesCount(req.user!.id);
      res.json({ count });
    } catch (error) {
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—á–µ—Ç—á–∏–∫–∞" });
    }
  });

  const httpServer = createServer(app);

  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º WebSocket —Å–µ—Ä–≤–µ—Ä –¥–ª—è push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  const wss = new WebSocketServer({ server: httpServer, path: '/ws' });
  
  // –•—Ä–∞–Ω–∏–º –∞–∫—Ç–∏–≤–Ω—ã–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const userConnections = new Map<number, WebSocket>();

  wss.on('connection', (ws) => {
    console.log('üì° –ù–æ–≤–æ–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ');
    
    ws.on('message', (data) => {
      try {
        const message = JSON.parse(data.toString());
        
        if (message.type === 'authenticate' && message.userId) {
          // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          userConnections.set(message.userId, ws);
          console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${message.userId} –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ WebSocket`);
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      }
    });

    ws.on('close', () => {
      // –£–¥–∞–ª—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
      for (const [userId, connection] of userConnections.entries()) {
        if (connection === ws) {
          userConnections.delete(userId);
          console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –æ—Ç–∫–ª—é—á–µ–Ω –æ—Ç WebSocket`);
          break;
        }
      }
    });

    ws.on('error', (error) => {
      console.error('WebSocket –æ—à–∏–±–∫–∞:', error);
    });
  });

  // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  global.sendNotification = (userId: number, notification: any) => {
    const connection = userConnections.get(userId);
    if (connection && connection.readyState === WebSocket.OPEN) {
      try {
        connection.send(JSON.stringify(notification));
        console.log(`üì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
      }
    }
  };

  return httpServer;
}
