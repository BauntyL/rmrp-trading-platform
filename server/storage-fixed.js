console.log('üì¶ Storage module loading...');

const path = require('path');

// –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï –î–õ–Ø –•–†–ê–ù–ï–ù–ò–Ø –î–ê–ù–ù–´–• (–í –ü–ê–ú–Ø–¢–ò)
let users = [];
let cars = [];
let favorites = [];
let messages = [];
let initialized = false;

// –ü–†–û–°–¢–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø (–ë–ï–ó SQLite)
async function initializeDatabase() {
  try {
    console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–≤ –ø–∞–º—è—Ç–∏)...');
    
    // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    users = [];
    cars = [];
    favorites = [];
    messages = [];
    
    // –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    await createDefaultAdmin();
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    await createTestData();
    
    initialized = true;
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ (–≤ –ø–∞–º—è—Ç–∏)');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î:', error);
    throw error;
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
async function createDefaultAdmin() {
  try {
    console.log('üë§ –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...');
    
    const bcrypt = require('bcrypt');
    const hashedPassword = await bcrypt.hash('admin123', 10);
    
    const admin = {
      id: 1,
      username: 'admin',
      password: hashedPassword,
      role: 'admin',
      email: 'admin@rmrp.com',
      createdAt: new Date().toISOString()
    };
    
    users.push(admin);
    console.log('‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω: admin/admin123');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∞:', error);
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
async function createTestData() {
  try {
    console.log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const bcrypt = require('bcrypt');
    const testPassword = await bcrypt.hash('test123', 10);
    
    const testUser = {
      id: 2,
      username: 'testuser',
      password: testPassword,
      role: 'user',
      email: 'test@rmrp.com',
      createdAt: new Date().toISOString()
    };
    
    users.push(testUser);
    console.log('üë§ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: testuser/test123');
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏
    const testCars = [
      {
        id: 1,
        name: 'BMW M5 Competition',
        category: '–°–ø–æ—Ä—Ç',
        server: '–ê—Ä–±–∞—Ç',
        price: 15000000,
        maxSpeed: 305,
        acceleration: '3.3 —Å–µ–∫',
        drive: 'AWD',
        phone: '+7 (999) 123-45-67',
        telegram: '@bmw_seller',
        discord: 'bmw_lover#1234',
        imageUrl: 'https://images.unsplash.com/photo-1555215695-3004980ad54e?w=800&h=600&fit=crop',
        description: '–ò–¥–µ–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –ø–æ–ª–Ω–∞—è –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è, –æ–¥–∏–Ω –≤–ª–∞–¥–µ–ª–µ—Ü',
        isPremium: true,
        status: 'approved',
        createdBy: 1,
        owner_id: 1,
        createdAt: new Date().toISOString()
      },
      {
        id: 2,
        name: 'Mercedes-AMG GT 63S',
        category: '–ö—É–ø–µ',
        server: '–†—É–±–ª–µ–≤–∫–∞',
        price: 18000000,
        maxSpeed: 315,
        acceleration: '3.2 —Å–µ–∫',
        drive: 'AWD',
        phone: '+7 (999) 765-43-21',
        telegram: '@merc_dealer',
        discord: 'merc_fan#5678',
        imageUrl: 'https://images.unsplash.com/photo-1618843479313-40f8afb4b4d8?w=800&h=600&fit=crop',
        description: '–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –∫–∞—Ä–±–æ–Ω–æ–≤—ã–º –ø–∞–∫–µ—Ç–æ–º',
        isPremium: true,
        status: 'approved',
        createdBy: 1,
        owner_id: 1,
        createdAt: new Date().toISOString()
      },
      {
        id: 3,
        name: 'Audi RS6 Avant',
        category: '–£–Ω–∏–≤–µ—Ä—Å–∞–ª',
        server: '–¢–≤–µ—Ä—Å–∫–æ–π',
        price: 12000000,
        maxSpeed: 280,
        acceleration: '3.6 —Å–µ–∫',
        drive: 'AWD',
        phone: '+7 (999) 111-22-33',
        telegram: '@audi_rs',
        discord: 'quattro_lover#9999',
        imageUrl: 'https://images.unsplash.com/photo-1606664515524-ed2f786a0bd6?w=800&h=600&fit=crop',
        description: '–°–µ–º–µ–π–Ω—ã–π —Å–ø–æ—Ä—Ç–∫–∞—Ä —Å –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ–π –ø—Ä–∞–∫—Ç–∏—á–Ω–æ—Å—Ç—å—é',
        isPremium: false,
        status: 'approved',
        createdBy: 1,
        owner_id: 1,
        createdAt: new Date().toISOString()
      },
      {
        id: 4,
        name: 'Porsche 911 Turbo S',
        category: '–°–ø–æ—Ä—Ç',
        server: '–ü–∞—Ç—Ä–∏–∫–∏',
        price: 22000000,
        maxSpeed: 330,
        acceleration: '2.7 —Å–µ–∫',
        drive: 'AWD',
        phone: '+7 (999) 888-77-66',
        telegram: '@porsche_pro',
        discord: 'turbo_master#1111',
        imageUrl: 'https://images.unsplash.com/photo-1544636331-e26879cd4d9b?w=800&h=600&fit=crop',
        description: '–õ–µ–≥–µ–Ω–¥–∞ –∞–≤—Ç–æ—Å–ø–æ—Ä—Ç–∞ –≤ –∏–¥–µ–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏',
        isPremium: true,
        status: 'approved',
        createdBy: 1,
        owner_id: 1,
        createdAt: new Date().toISOString()
      },
      {
        id: 5,
        name: 'Lamborghini Hurac√°n EVO',
        category: '–°—É–ø–µ—Ä–∫–∞—Ä',
        server: '–ê—Ä–±–∞—Ç',
        price: 25000000,
        maxSpeed: 325,
        acceleration: '2.9 —Å–µ–∫',
        drive: 'AWD',
        phone: '+7 (999) 222-33-44',
        telegram: '@lambo_king',
        discord: 'bull_rider#2222',
        imageUrl: 'https://images.unsplash.com/photo-1544636331-e26879cd4d9b?w=800&h=600&fit=crop',
        description: '–ò—Ç–∞–ª—å—è–Ω—Å–∫–∞—è —Å—Ç—Ä–∞—Å—Ç—å –≤ –∫–∞–∂–¥–æ–π –¥–µ—Ç–∞–ª–∏',
        isPremium: true,
        status: 'approved',
        createdBy: 1,
        owner_id: 1,
        createdAt: new Date().toISOString()
      }
    ];
    
    cars.push(...testCars);
    console.log(`üöó –°–æ–∑–¥–∞–Ω–æ ${testCars.length} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
  }
}

// ===== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò =====

function getUserById(id) {
  const user = users.find(u => u.id === parseInt(id));
  console.log('üîç getUserById:', id, user ? '–Ω–∞–π–¥–µ–Ω' : '–Ω–µ –Ω–∞–π–¥–µ–Ω');
  return user;
}

function getUserByUsername(username) {
  const user = users.find(u => u.username === username);
  console.log('üîç getUserByUsername:', username, user ? '–Ω–∞–π–¥–µ–Ω' : '–Ω–µ –Ω–∞–π–¥–µ–Ω');
  return user;
}

function createUser(userData) {
  console.log('üë§ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userData);
  
  const newUser = {
    id: users.length + 1,
    username: userData.username,
    password: userData.password,
    email: userData.email || null,
    role: userData.role || 'user',
    createdAt: new Date().toISOString()
  };
  
  users.push(newUser);
  console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:', newUser);
  return newUser;
}

// ===== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ê–í–¢–û–ú–û–ë–ò–õ–Ø–ú–ò =====

function getAllCars() {
  console.log(`üöó –ü–æ–ª—É—á–µ–Ω–æ ${cars.length} –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π`);
  return cars;
}

function getCarById(id) {
  const car = cars.find(c => c.id === parseInt(id));
  console.log('üîç getCarById:', id, car ? '–Ω–∞–π–¥–µ–Ω' : '–Ω–µ –Ω–∞–π–¥–µ–Ω');
  return car;
}

function createCar(carData) {
  console.log('üöó –°–æ–∑–¥–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:', carData);
  
  const newCar = {
    id: cars.length + 1,
    name: carData.name,
    category: carData.category,
    server: carData.server,
    price: carData.price,
    maxSpeed: carData.maxSpeed || 0,
    acceleration: carData.acceleration || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
    drive: carData.drive || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
    phone: carData.phone || null,
    telegram: carData.telegram || null,
    discord: carData.discord || null,
    imageUrl: carData.imageUrl || null,
    description: carData.description || null,
    isPremium: carData.isPremium || false,
    status: carData.status || 'approved',
    createdBy: carData.createdBy,
    owner_id: carData.owner_id || carData.createdBy,
    createdAt: new Date().toISOString()
  };
  
  cars.push(newCar);
  console.log('‚úÖ –ê–≤—Ç–æ–º–æ–±–∏–ª—å —Å–æ–∑–¥–∞–Ω:', newCar);
  return newCar;
}

function updateCar(id, carData) {
  console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:', id, carData);
  
  const carIndex = cars.findIndex(c => c.id === parseInt(id));
  if (carIndex === -1) {
    console.log('‚ùå –ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return null;
  }
  
  cars[carIndex] = {
    ...cars[carIndex],
    ...carData,
    updatedAt: new Date().toISOString()
  };
  
  console.log('‚úÖ –ê–≤—Ç–æ–º–æ–±–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω:', cars[carIndex]);
  return cars[carIndex];
}

function deleteCar(id) {
  console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:', id);
  
  const carIndex = cars.findIndex(c => c.id === parseInt(id));
  if (carIndex === -1) {
    console.log('‚ùå –ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return false;
  }
  
  cars.splice(carIndex, 1);
  console.log('‚úÖ –ê–≤—Ç–æ–º–æ–±–∏–ª—å —É–¥–∞–ª–µ–Ω');
  return true;
}

// ===== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ò–ó–ë–†–ê–ù–ù–´–ú =====

function getUserFavorites(userId) {
  const userFavorites = favorites.filter(f => f.userId === parseInt(userId));
  const favoriteCars = userFavorites.map(f => {
    const car = cars.find(c => c.id === f.carId);
    return car ? { ...car, addedToFavoritesAt: f.createdAt } : null;
  }).filter(Boolean);
  
  console.log(`‚ù§Ô∏è –ü–æ–ª—É—á–µ–Ω–æ ${favoriteCars.length} –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
  return favoriteCars;
}

function addToFavorites(userId, carId) {
  console.log('‚ù§Ô∏è –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ:', userId, carId);
  
  const existing = favorites.find(f => f.userId === parseInt(userId) && f.carId === parseInt(carId));
  if (existing) {
    console.log('‚ö†Ô∏è –£–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º');
    return { userId, carId, success: false, message: 'Already in favorites' };
  }
  
  const favorite = {
    id: favorites.length + 1,
    userId: parseInt(userId),
    carId: parseInt(carId),
    createdAt: new Date().toISOString()
  };
  
  favorites.push(favorite);
  console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ');
  return { userId, carId, success: true };
}

function removeFromFavorites(userId, carId) {
  console.log('üíî –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:', userId, carId);
  
  const favoriteIndex = favorites.findIndex(f => f.userId === parseInt(userId) && f.carId === parseInt(carId));
  if (favoriteIndex === -1) {
    console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º');
    return false;
  }
  
  favorites.splice(favoriteIndex, 1);
  console.log('‚úÖ –£–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ');
  return true;
}

// ===== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –°–û–û–ë–©–ï–ù–ò–Ø–ú–ò =====

function createMessage(messageData) {
  console.log('üí¨ –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', messageData);
  
  const newMessage = {
    id: messages.length + 1,
    senderId: messageData.senderId,
    receiverId: messageData.receiverId,
    carId: messageData.carId || null,
    content: messageData.content,
    isRead: false,
    createdAt: new Date().toISOString()
  };
  
  messages.push(newMessage);
  console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ:', newMessage);
  return newMessage;
}

function getUserMessages(userId) {
  const userMessages = messages.filter(m => 
    m.senderId === parseInt(userId) || m.receiverId === parseInt(userId)
  );
  
  console.log(`üí¨ –ü–æ–ª—É—á–µ–Ω–æ ${userMessages.length} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
  return userMessages;
}

// ===== –≠–ö–°–ü–û–†–¢ –í–°–ï–• –§–£–ù–ö–¶–ò–ô =====

module.exports = {
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
  initializeDatabase,
  
  // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
  getUserById,
  getUserByUsername,
  createUser,
  
  // –ê–≤—Ç–æ–º–æ–±–∏–ª–∏
  getAllCars,
  getCarById,
  createCar,
  updateCar,
  deleteCar,
  
  // –ò–∑–±—Ä–∞–Ω–Ω–æ–µ
  getUserFavorites,
  addToFavorites,
  removeFromFavorites,
  
  // –°–æ–æ–±—â–µ–Ω–∏—è
  createMessage,
  getUserMessages,
};

console.log('üì¶ Storage module loaded successfully');
