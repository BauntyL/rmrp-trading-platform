const express = require('express');
const bcrypt = require('bcrypt');
const storage = require('./storage-fixed');

const router = express.Router();

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
function requireAuth(req, res, next) {
  if (req.session && req.session.user) {
    req.user = req.session.user;
    console.log('üîê Auth check: User:', req.user.username);
    return next();
  }
  console.log('‚ùå Auth required but user not authenticated');
  res.status(401).json({ error: 'Authentication required' });
}

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏
function requireRole(roles) {
  return (req, res, next) => {
    if (!req.session || !req.session.user) {
      return res.status(401).json({ error: 'Authentication required' });
    }
    
    const userRole = req.session.user.role;
    console.log('üõ°Ô∏è Role check:', userRole);
    
    if (roles.includes(userRole)) {
      return next();
    }
    
    console.log('‚ùå Access denied. Required roles:', roles, 'User role:', userRole);
    res.status(403).json({ error: 'Insufficient permissions' });
  };
}

// –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
router.post('/login', async (req, res) => {
  try {
    const { username, password } = req.body;
    console.log('üîë Login attempt for:', username);
    
    if (!username || !password) {
      return res.status(400).json({ error: 'Username and password required' });
    }
    
    const user = await storage.getUserByUsername(username);
    if (!user) {
      console.log('‚ùå User not found:', username);
      return res.status(401).json({ error: 'Invalid credentials' });
    }
    
    const passwordMatch = await bcrypt.compare(password, user.password);
    
    if (!passwordMatch) {
      console.log('‚ùå Invalid password for:', username);
      return res.status(401).json({ error: 'Invalid credentials' });
    }
    
    req.session.userId = user.id;
    req.session.user = {
      id: user.id,
      username: user.username,
      role: user.role
    };
    
    req.session.save((err) => {
      if (err) {
        console.error('‚ùå Session save error:', err);
        return res.status(500).json({ error: 'Session save failed' });
      }
      
      const responseData = {
        user: {
          id: user.id,
          username: user.username,
          role: user.role
        }
      };
      
      console.log('‚úÖ Login successful for:', user.username);
      res.json(responseData);
    });
    
  } catch (error) {
    console.error('‚ùå Login error:', error);
    res.status(500).json({ error: 'Login failed' });
  }
});

router.post('/register', async (req, res) => {
  try {
    const { username, password } = req.body;
    console.log('üìù Registration attempt for:', username);
    
    if (!username || !password) {
      return res.status(400).json({ error: 'Username and password required' });
    }
    
    const existingUser = await storage.getUserByUsername(username);
    if (existingUser) {
      console.log('‚ùå User already exists:', username);
      return res.status(400).json({ error: 'User already exists' });
    }
    
    const hashedPassword = await bcrypt.hash(password, 10);
    
    const user = await storage.createUser({
      username,
      password: hashedPassword,
      role: 'user'
    });
    
    console.log('‚úÖ User registered:', username);
    res.status(201).json({
      user: {
        id: user.id,
        username: user.username,
        role: user.role
      }
    });
  } catch (error) {
    console.error('‚ùå Registration error:', error);
    res.status(500).json({ error: 'Registration failed' });
  }
});

router.post('/logout', (req, res) => {
  const username = req.session?.user?.username || 'Unknown';
  req.session.destroy((err) => {
    if (err) {
      console.error('‚ùå Logout error:', err);
      return res.status(500).json({ error: 'Logout failed' });
    }
    console.log('‚úÖ User logged out:', username);
    res.json({ message: 'Logged out successfully' });
  });
});

router.get('/user', (req, res) => {
  console.log('üë§ User info requested');
  
  if (req.session && req.session.user) {
    const userData = {
      user: {
        id: req.session.user.id,
        username: req.session.user.username,
        role: req.session.user.role
      }
    };
    console.log('‚úÖ Returning user data:', userData);
    res.json(userData);
  } else {
    console.log('‚ùå No user in session');
    res.status(401).json({ error: 'Not authenticated' });
  }
});

// –ó–∞—è–≤–∫–∏
router.post('/applications', requireAuth, async (req, res) => {
  try {
    console.log('üìù Creating application for user:', req.user.username);
    console.log('üìã RAW request body:', req.body);
    
    const applicationData = {
      ...req.body,
      createdBy: req.user.id,
      status: 'pending'
    };
    
    console.log('üìù Creating application with data:', applicationData);
    
    const application = await storage.createApplication(applicationData);
    
    console.log('‚úÖ Application created successfully:', application.id);
    res.status(201).json(application);
    
  } catch (error) {
    console.error('‚ùå Error creating application:', error);
    res.status(500).json({ 
      error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏',
      details: error.message 
    });
  }
});

router.get('/applications/pending', requireAuth, requireRole(['moderator', 'admin']), async (req, res) => {
  try {
    console.log('üìã Fetching pending applications for:', req.user.username);
    const applications = await storage.getApplications();
    const pendingApplications = applications.filter(app => app.status === 'pending');
    
    console.log('üì¶ Found pending applications:', pendingApplications.length);
    res.json(pendingApplications);
  } catch (error) {
    console.error('‚ùå Error fetching pending applications:', error);
    res.status(500).json({ error: 'Failed to fetch applications' });
  }
});

router.get('/my-applications', requireAuth, async (req, res) => {
  try {
    console.log('üìã Fetching applications for user:', req.user.username);
    const applications = await storage.getUserApplications(req.user.id);
    
    console.log('üì¶ Found user applications:', applications.length);
    res.json(applications);
  } catch (error) {
    console.error('‚ùå Error fetching user applications:', error);
    res.status(500).json({ error: 'Failed to fetch applications' });
  }
});

// –°–û–ó–î–ê–ù–ò–ï –û–ë–™–Ø–í–õ–ï–ù–ò–Ø –°–û –í–°–ï–ú–ò –ü–û–õ–Ø–ú–ò –ò –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï–ú
router.patch('/applications/:id/status', requireAuth, requireRole(['moderator', 'admin']), async (req, res) => {
  try {
    const { id } = req.params;
    const { status } = req.body;
    
    console.log('üîÑ Updating application status:', id, 'to:', status, 'by:', req.user.username);
    
    if (!['pending', 'approved', 'rejected'].includes(status)) {
      return res.status(400).json({ error: 'Invalid status' });
    }
    
    const application = await storage.updateApplicationStatus(id, status);
    
    // –°–û–ó–î–ê–ù–ò–ï –û–ë–™–Ø–í–õ–ï–ù–ò–Ø –°–û –í–°–ï–ú–ò –ü–û–õ–Ø–ú–ò
    if (status === 'approved') {
      console.log('‚úÖ Creating car listing from approved application');
      console.log('üìã Application data for car listing:', application);
      
      try {
        await storage.createCarListing({
          name: application.name,
          price: application.price,
          description: application.description,
          category: application.category,
          server: application.server,
          maxSpeed: application.maxSpeed,
          acceleration: application.acceleration,
          drive: application.drive,
          isPremium: application.isPremium || false,
          phone: application.phone,
          telegram: application.telegram,
          discord: application.discord,
          imageUrl: application.imageUrl,
          owner_id: application.createdBy,
          application_id: application.id
        });
        
        console.log('‚úÖ Car listing created successfully from application');
        
      } catch (carError) {
        console.error('‚ùå Error creating car listing:', carError);
        // –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
      }
    }
    
    console.log('‚úÖ Application status updated successfully');
    res.json(application);
    
  } catch (error) {
    console.error('‚ùå Error updating application status:', error);
    res.status(500).json({ error: 'Failed to update application' });
  }
});

// === –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –°–û–û–ë–©–ï–ù–ò–Ø ===
// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/messages', requireAuth, async (req, res) => {
  try {
    console.log('üì® Fetching messages for user:', req.user.id);
    
    const { Client } = require('pg');
    const client = new Client({
      connectionString: process.env.DATABASE_URL,
      ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
    });
    
    await client.connect();
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª—è—Ö –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
    const query = `
      SELECT 
        m.id,
        m."carId",
        m."senderId",
        m."receiverId",
        m.content,
        m."isRead",
        m."createdAt",
        cl.name as "carName",
        cl.owner_id as "sellerId",
        sender.username as "senderName",
        receiver.username as "receiverName",
        CASE 
          WHEN m."senderId" = $1 THEN m."receiverId"
          ELSE m."senderId"
        END as "otherUserId"
      FROM messages m
      LEFT JOIN car_listings cl ON m."carId" = cl.id
      LEFT JOIN users sender ON m."senderId" = sender.id
      LEFT JOIN users receiver ON m."receiverId" = receiver.id
      WHERE m."senderId" = $1 OR m."receiverId" = $1
      ORDER BY m."createdAt" DESC
    `;
    
    const result = await client.query(query, [req.user.id]);
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    const messages = result.rows.map(row => ({
      id: row.id,
      carId: row.carId,
      buyerId: row.senderId === row.sellerId ? row.receiverId : row.senderId,
      sellerId: row.sellerId,
      senderId: row.senderId,
      recipientId: row.receiverId,
      content: row.content,
      isRead: row.isRead,
      createdAt: row.createdAt,
      carName: row.carName,
      buyerName: row.senderId === row.sellerId ? row.receiverName : row.senderName,
      sellerName: row.senderName
    }));
    
    await client.end();
    
    console.log(`‚úÖ Found ${messages.length} messages for user ${req.user.id}`);
    res.json(messages);
    
  } catch (error) {
    console.error('‚ùå Error fetching messages:', error);
    res.status(500).json({ error: 'Failed to fetch messages' });
  }
});

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
router.post('/messages', requireAuth, async (req, res) => {
  try {
    const { carId, sellerId, message } = req.body;
    console.log('üì§ Sending message:', { carId, sellerId, message, fromUser: req.user.id });
    
    if (!carId || !sellerId || !message) {
      return res.status(400).json({ error: 'Missing required fields' });
    }
    
    if (message.length > 500) {
      return res.status(400).json({ error: '–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤)' });
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
    const bannedWords = ['–º–∞—Ç', '–ø–æ–ª–∏—Ç–∏–∫–∞', 'http', 'www', 'telegram', '@'];
    const containsBanned = bannedWords.some(word => 
      message.toLowerCase().includes(word.toLowerCase())
    );
    
    if (containsBanned) {
      return res.status(400).json({ 
        error: '–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –∏–ª–∏ —Å—Å—ã–ª–∫–∏' 
      });
    }
    
    const { Client } = require('pg');
    const client = new Client({
      connectionString: process.env.DATABASE_URL,
      ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
    });
    
    await client.connect();
    
    // –í—Å—Ç–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    const insertQuery = `
      INSERT INTO messages ("senderId", "receiverId", "carId", content, "isRead", "createdAt")
      VALUES ($1, $2, $3, $4, false, NOW())
      RETURNING *
    `;
    
    const result = await client.query(insertQuery, [
      req.user.id,  // senderId
      sellerId,     // receiverId  
      carId,
      message
    ]);
    
    await client.end();
    
    console.log('‚úÖ Message sent successfully:', result.rows[0]);
    res.status(201).json(result.rows[0]);
    
  } catch (error) {
    console.error('‚ùå Error sending message:', error);
    res.status(500).json({ error: 'Failed to send message' });
  }
});

// –û—Ç–º–µ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö
router.post('/messages/mark-read', requireAuth, async (req, res) => {
  try {
    const { carId, buyerId, sellerId } = req.body;
    console.log('üìñ Marking messages as read:', { carId, buyerId, sellerId, userId: req.user.id });
    
    const { Client } = require('pg');
    const client = new Client({
      connectionString: process.env.DATABASE_URL,
      ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
    });
    
    await client.connect();
    
    // –û—Ç–º–µ—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –¥–∞–Ω–Ω–æ–º –¥–∏–∞–ª–æ–≥–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const updateQuery = `
      UPDATE messages 
      SET "isRead" = true 
      WHERE "carId" = $1 
        AND "receiverId" = $2
        AND "isRead" = false
    `;
    
    const result = await client.query(updateQuery, [carId, req.user.id]);
    
    await client.end();
    
    console.log(`‚úÖ Marked ${result.rowCount} messages as read`);
    res.json({ 
      success: true, 
      messagesMarked: result.rowCount 
    });
    
  } catch (error) {
    console.error('‚ùå Error marking messages as read:', error);
    res.status(500).json({ error: 'Failed to mark messages as read' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
router.get('/messages/unread-count', requireAuth, async (req, res) => {
  try {
    const { Client } = require('pg');
    const client = new Client({
      connectionString: process.env.DATABASE_URL,
      ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
    });
    
    await client.connect();
    
    const countQuery = `
      SELECT COUNT(*) as count
      FROM messages 
      WHERE "receiverId" = $1 AND "isRead" = false
    `;
    
    const result = await client.query(countQuery, [req.user.id]);
    await client.end();
    
    const count = parseInt(result.rows[0].count) || 0;
    console.log(`üì¨ Unread messages count for user ${req.user.id}: ${count}`);
    
    res.json({ count });
    
  } catch (error) {
    console.error('‚ùå Error getting unread count:', error);
    res.status(500).json({ error: 'Failed to get unread count' });
  }
});

// === –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –ò–ó–ë–†–ê–ù–ù–û–ï ===
// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
router.post('/favorites/toggle/:carId', requireAuth, async (req, res) => {
  try {
    const carId = parseInt(req.params.carId);
    const userId = req.user.id;
    
    console.log('‚ù§Ô∏è Toggling favorite:', { carId, userId });
    
    const { Client } = require('pg');
    const client = new Client({
      connectionString: process.env.DATABASE_URL,
      ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
    });
    
    await client.connect();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
    const checkQuery = `
      SELECT id FROM favorites 
      WHERE "userId" = $1 AND "carId" = $2
    `;
    const checkResult = await client.query(checkQuery, [userId, carId]);
    
    let action;
    if (checkResult.rows.length > 0) {
      // –£–¥–∞–ª—è–µ–º –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
      const deleteQuery = `
        DELETE FROM favorites 
        WHERE "userId" = $1 AND "carId" = $2
      `;
      await client.query(deleteQuery, [userId, carId]);
      action = 'removed';
    } else {
      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
      const insertQuery = `
        INSERT INTO favorites ("userId", "carId", "createdAt")
        VALUES ($1, $2, NOW())
      `;
      await client.query(insertQuery, [userId, carId]);
      action = 'added';
    }
    
    await client.end();
    
    console.log(`‚úÖ Favorite ${action} successfully`);
    res.json({ 
      action, 
      isFavorite: action === 'added' 
    });
    
  } catch (error) {
    console.error('‚ùå Error toggling favorite:', error);
    res.status(500).json({ error: 'Failed to toggle favorite' });
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
router.get('/favorites/check/:carId', requireAuth, async (req, res) => {
  try {
    const carId = parseInt(req.params.carId);
    const userId = req.user.id;
    
    const { Client } = require('pg');
    const client = new Client({
      connectionString: process.env.DATABASE_URL,
      ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
    });
    
    await client.connect();
    
    const checkQuery = `
      SELECT id FROM favorites 
      WHERE "userId" = $1 AND "carId" = $2
    `;
    const result = await client.query(checkQuery, [userId, carId]);
    
    await client.end();
    
    res.json({ isFavorite: result.rows.length > 0 });
    
  } catch (error) {
    console.error('‚ùå Error checking favorite:', error);
    res.status(500).json({ error: 'Failed to check favorite' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
router.get('/favorites', requireAuth, async (req, res) => {
  try {
    console.log('‚ù§Ô∏è Fetching favorites for user:', req.user.id);
    
    const { Client } = require('pg');
    const client = new Client({
      connectionString: process.env.DATABASE_URL,
      ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
    });
    
    await client.connect();
    
    const query = `
      SELECT cl.*, u.username as "createdByUsername"
      FROM favorites f
      JOIN car_listings cl ON f."carId" = cl.id
      LEFT JOIN users u ON cl.owner_id = u.id
      WHERE f."userId" = $1
      ORDER BY f."createdAt" DESC
    `;
    
    const result = await client.query(query, [req.user.id]);
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    const favorites = result.rows.map(row => ({
      id: row.id,
      name: row.name,
      price: row.price,
      description: row.description,
      category: row.category,
      server: row.server,
      maxSpeed: row.maxSpeed,
      acceleration: row.acceleration,
      drive: row.drive,
      isPremium: row.isPremium,
      phone: row.phone,
      telegram: row.telegram,
      discord: row.discord,
      imageUrl: row.imageUrl,
      createdBy: row.owner_id,
      createdByUsername: row.createdByUsername,
      createdAt: row.created_at
    }));
    
    await client.end();
    
    console.log(`‚úÖ Found ${favorites.length} favorites`);
    res.json(favorites);
    
  } catch (error) {
    console.error('‚ùå Error fetching favorites:', error);
    res.status(500).json({ error: 'Failed to fetch favorites' });
  }
});

// === –ê–í–¢–û–ú–û–ë–ò–õ–ò ===
// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
router.get('/cars', async (req, res) => {
  try {
    const { search, category, server } = req.query;
    console.log('üöó Fetching cars with filters:', { search, category, server });
    
    const { Client } = require('pg');
    const client = new Client({
      connectionString: process.env.DATABASE_URL,
      ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
    });
    
    await client.connect();
    
    let query = `
      SELECT cl.*, u.username as "createdByUsername"
      FROM car_listings cl
      LEFT JOIN users u ON cl.owner_id = u.id
      WHERE 1=1
    `;
    const params = [];
    
    if (search) {
      params.push(`%${search}%`);
      query += ` AND cl.name ILIKE $${params.length}`;
    }
    
    if (category && category !== 'all') {
      params.push(category);
      query += ` AND cl.category = $${params.length}`;
    }
    
    if (server && server !== 'all') {
      params.push(server);
      query += ` AND cl.server = $${params.length}`;
    }
    
    query += ` ORDER BY cl.created_at DESC`;
    
    const result = await client.query(query, params);
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    const cars = result.rows.map(row => ({
      id: row.id,
      name: row.name,
      price: row.price,
      description: row.description,
      category: row.category,
      server: row.server,
      maxSpeed: row.maxSpeed,
      acceleration: row.acceleration,
      drive: row.drive,
      isPremium: row.isPremium,
      phone: row.phone,
      telegram: row.telegram,
      discord: row.discord,
      imageUrl: row.imageUrl,
      createdBy: row.owner_id,
      createdByUsername: row.createdByUsername,
      createdAt: row.created_at
    }));
    
    await client.end();
    
    console.log(`‚úÖ Found ${cars.length} cars`);
    res.json(cars);
    
  } catch (error) {
    console.error('‚ùå Error fetching cars:', error);
    res.status(500).json({ error: 'Failed to fetch cars' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/my-cars', requireAuth, async (req, res) => {
  try {
    console.log('üöó Fetching my cars for user:', req.user.id);
    
    const { Client } = require('pg');
    const client = new Client({
      connectionString: process.env.DATABASE_URL,
      ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
    });
    
    await client.connect();
    
    const query = `
      SELECT cl.*, u.username as "createdByUsername"
      FROM car_listings cl
      LEFT JOIN users u ON cl.owner_id = u.id
      WHERE cl.owner_id = $1
      ORDER BY cl.created_at DESC
    `;
    
    const result = await client.query(query, [req.user.id]);
    
    const cars = result.rows.map(row => ({
      id: row.id,
      name: row.name,
      price: row.price,
      description: row.description,
      category: row.category,
      server: row.server,
      maxSpeed: row.maxSpeed,
      acceleration: row.acceleration,
      drive: row.drive,
      isPremium: row.isPremium,
      phone: row.phone,
      telegram: row.telegram,
      discord: row.discord,
      imageUrl: row.imageUrl,
      createdBy: row.owner_id,
      createdByUsername: row.createdByUsername,
      createdAt: row.created_at
    }));
    
    await client.end();
    
    console.log(`‚úÖ Found ${cars.length} cars for user`);
    res.json(cars);
    
  } catch (error) {
    console.error('‚ùå Error fetching my cars:', error);
    res.status(500).json({ error: 'Failed to fetch my cars' });
  }
});

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è (—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü)
router.put('/cars/:id', requireAuth, async (req, res) => {
  try {
    const carId = parseInt(req.params.id);
    const userId = req.user.id;
    
    console.log('‚úèÔ∏è Editing car:', { carId, userId });
    
    const { Client } = require('pg');
    const client = new Client({
      connectionString: process.env.DATABASE_URL,
      ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
    });
    
    await client.connect();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ (—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –∏–ª–∏ –∞–¥–º–∏–Ω/–º–æ–¥–µ—Ä–∞—Ç–æ—Ä)
    const checkQuery = `
      SELECT owner_id FROM car_listings WHERE id = $1
    `;
    const checkResult = await client.query(checkQuery, [carId]);
    
    if (checkResult.rows.length === 0) {
      await client.end();
      return res.status(404).json({ error: 'Car not found' });
    }
    
    const carOwnerId = checkResult.rows[0].owner_id;
    const isOwner = carOwnerId === userId;
    const isAdmin = req.user.role === 'admin' || req.user.role === 'moderator';
    
    if (!isOwner && !isAdmin) {
      await client.end();
      return res.status(403).json({ error: 'You can only edit your own cars' });
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª—å
    const {
      name, price, description, category, server, maxSpeed,
      acceleration, drive, isPremium, phone, telegram, discord, imageUrl
    } = req.body;
    
    const updateQuery = `
      UPDATE car_listings SET 
        name = $1,
        price = $2,
        description = $3,
        category = $4,
        server = $5,
        "maxSpeed" = $6,
        acceleration = $7,
        drive = $8,
        "isPremium" = $9,
        phone = $10,
        telegram = $11,
        discord = $12,
        "imageUrl" = $13
      WHERE id = $14
      RETURNING *
    `;
    
    const result = await client.query(updateQuery, [
      name, price, description, category, server, maxSpeed,
      acceleration, drive, isPremium, phone, telegram, discord, imageUrl, carId
    ]);
    
    await client.end();
    
    console.log('‚úÖ Car updated successfully');
    res.json(result.rows[0]);
    
  } catch (error) {
    console.error('‚ùå Error updating car:', error);
    res.status(500).json({ error: 'Failed to update car' });
  }
});

// –£–¥–∞–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è (—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü)
router.delete('/cars/:id', requireAuth, async (req, res) => {
  try {
    const carId = parseInt(req.params.id);
    const userId = req.user.id;
    
    console.log('üóëÔ∏è Deleting car:', { carId, userId });
    
    const { Client } = require('pg');
    const client = new Client({
      connectionString: process.env.DATABASE_URL,
      ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
    });
    
    await client.connect();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    const checkQuery = `
      SELECT owner_id FROM car_listings WHERE id = $1
    `;
    const checkResult = await client.query(checkQuery, [carId]);
    
    if (checkResult.rows.length === 0) {
      await client.end();
      return res.status(404).json({ error: 'Car not found' });
    }
    
    const carOwnerId = checkResult.rows[0].owner_id;
    const isOwner = carOwnerId === userId;
    const isAdmin = req.user.role === 'admin' || req.user.role === 'moderator';
    
    if (!isOwner && !isAdmin) {
      await client.end();
      return res.status(403).json({ error: 'You can only delete your own cars' });
    }
    
    // –£–¥–∞–ª—è–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª—å (—Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ —É–¥–∞–ª—è—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ CASCADE)
    const deleteQuery = `
      DELETE FROM car_listings WHERE id = $1
    `;
    await client.query(deleteQuery, [carId]);
    
    await client.end();
    
    console.log('‚úÖ Car deleted successfully');
    res.json({ success: true });
    
  } catch (error) {
    console.error('‚ùå Error deleting car:', error);
    res.status(500).json({ error: 'Failed to delete car' });
  }
});

module.exports = router;
