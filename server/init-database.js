import bcrypt from "bcrypt";
import { pool } from "./db.js";

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è
async function hashPassword(password) {
  return await bcrypt.hash(password, 12);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function createUser(username, password, role) {
  const hashedPassword = await hashPassword(password);
  const result = await pool.query(
    'INSERT INTO users (username, password, role) VALUES ($1, $2, $3) RETURNING *',
    [username, hashedPassword, role]
  );
  return result.rows[0];
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è
async function createCar(carData) {
  const {
    name,
    description,
    price,
    category,
    server,
    createdBy,
    imageUrl = 'https://via.placeholder.com/400x300?text=Car'
  } = carData;

  const result = await pool.query(
    `INSERT INTO cars (name, description, price, category, server, "createdBy", "imageUrl") 
     VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING *`,
    [name, description, price, category, server, createdBy, imageUrl]
  );
  return result.rows[0];
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
export async function initDatabase() {
  console.log('üîß Initializing database tables...');

  try {
    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await pool.query(`
      CREATE TABLE IF NOT EXISTS users (
        id SERIAL PRIMARY KEY,
        username VARCHAR(255) UNIQUE NOT NULL,
        password VARCHAR(255) NOT NULL,
        role VARCHAR(50) DEFAULT 'user',
        "createdAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
    await pool.query(`
      CREATE TABLE IF NOT EXISTS cars (
        id SERIAL PRIMARY KEY,
        name VARCHAR(255) NOT NULL,
        description TEXT,
        price INTEGER NOT NULL,
        category VARCHAR(100) NOT NULL,
        server VARCHAR(100) NOT NULL,
        "createdBy" INTEGER REFERENCES users(id) ON DELETE CASCADE,
        "imageUrl" TEXT DEFAULT 'https://via.placeholder.com/400x300?text=Car',
        "createdAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∑–∞—è–≤–æ–∫ –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏
    await pool.query(`
      CREATE TABLE IF NOT EXISTS car_applications (
        id SERIAL PRIMARY KEY,
        name VARCHAR(255) NOT NULL,
        description TEXT,
        price INTEGER NOT NULL,
        category VARCHAR(100) NOT NULL,
        server VARCHAR(100) NOT NULL,
        "createdBy" INTEGER REFERENCES users(id) ON DELETE CASCADE,
        "imageUrl" TEXT DEFAULT 'https://via.placeholder.com/400x300?text=Car',
        status VARCHAR(50) DEFAULT 'pending',
        "reviewedBy" INTEGER REFERENCES users(id),
        "reviewedAt" TIMESTAMP,
        "createdAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
    await pool.query(`
      CREATE TABLE IF NOT EXISTS favorites (
        id SERIAL PRIMARY KEY,
        "userId" INTEGER REFERENCES users(id) ON DELETE CASCADE,
        "carId" INTEGER REFERENCES cars(id) ON DELETE CASCADE,
        "createdAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        UNIQUE("userId", "carId")
      )
    `);

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–æ–±—â–µ–Ω–∏–π
    await pool.query(`
      CREATE TABLE IF NOT EXISTS messages (
        id SERIAL PRIMARY KEY,
        "senderId" INTEGER REFERENCES users(id) ON DELETE CASCADE,
        "receiverId" INTEGER REFERENCES users(id) ON DELETE CASCADE,
        "carId" INTEGER REFERENCES cars(id) ON DELETE CASCADE,
        content TEXT NOT NULL,
        "isRead" BOOLEAN DEFAULT FALSE,
        "createdAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);

    console.log('‚úÖ Database tables initialized');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ –∞–¥–º–∏–Ω—ã
    const adminCheck = await pool.query(
      'SELECT * FROM users WHERE role = $1',
      ['admin']
    );

    if (adminCheck.rows.length === 0) {
      console.log('üå± Creating admin accounts...');

      // –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
      const admin1 = await createUser('477-554', 'lql477kqkvb55vp', 'admin');
      const admin2 = await createUser('–ë–∞—É–Ω—Ç–∏ –ú–∏–ª–ª–µ—Ä', 'Lqlcpyvb555!999#81', 'admin');

      console.log(`üë§ Admin 1: ${admin1.username} (ID: ${admin1.id})`);
      console.log(`üë§ Admin 2: ${admin2.username} (ID: ${admin2.id})`);
      console.log('üë§ Admin 477-554: lql477kqkvb55vp');
      console.log('üë§ Admin –ë–∞—É–Ω—Ç–∏ –ú–∏–ª–ª–µ—Ä: Lqlcpyvb555!999#81');
    } else {
      console.log(`‚úÖ Found ${adminCheck.rows.length} existing admin(s)`);
      console.log('üë§ Admin 477-554: lql477kqkvb55vp');
      console.log('üë§ Admin –ë–∞—É–Ω—Ç–∏ –ú–∏–ª–ª–µ—Ä: Lqlcpyvb555!999#81');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
    const carCheck = await pool.query('SELECT COUNT(*) FROM cars');
    const carCount = parseInt(carCheck.rows[0].count);

    if (carCount === 0) {
      console.log('üöó Creating sample cars...');

      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏
      const sampleCars = [
        {
          name: 'BMW X5 M50i',
          description: '–ú–æ—â–Ω—ã–π –∏ —Ä–æ—Å–∫–æ—à–Ω—ã–π –≤–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫ —Å V8 –¥–≤–∏–≥–∞—Ç–µ–ª–µ–º. –û—Ç–ª–∏—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –ø–æ–ª–Ω–∞—è –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è.',
          price: 4500000,
          category: '–í–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫–∏',
          server: 'Grand RP',
          createdBy: adminCheck.rows[0]?.id || 1,
          imageUrl: 'https://images.unsplash.com/photo-1555215695-3004980ad54e?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80'
        },
        {
          name: 'Mercedes-Benz G63 AMG',
          description: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –ì–µ–ª–µ–Ω–¥–≤–∞–≥–µ–Ω —Å –º–æ—â–Ω—ã–º AMG –¥–≤–∏–≥–∞—Ç–µ–ª–µ–º. –°—Ç–∞—Ç—É—Å–Ω—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å –¥–ª—è –Ω–∞—Å—Ç–æ—è—â–∏—Ö —Ü–µ–Ω–∏—Ç–µ–ª–µ–π.',
          price: 6800000,
          category: '–í–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫–∏',
          server: 'Arizona RP',
          createdBy: adminCheck.rows[0]?.id || 1,
          imageUrl: 'https://images.unsplash.com/photo-1563720360172-67b8f3dce741?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80'
        },
        {
          name: 'Lamborghini Hurac√°n',
          description: '–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π —Å—É–ø–µ—Ä–∫–∞—Ä —Å –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ–π –¥–∏–Ω–∞–º–∏–∫–æ–π. V10 –¥–≤–∏–≥–∞—Ç–µ–ª—å, –ø–æ–ª–Ω—ã–π –ø—Ä–∏–≤–æ–¥, –∫–∞—Ä–±–æ–Ω–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã.',
          price: 8900000,
          category: '–°–ø–æ—Ä—Ç–∫–∞—Ä—ã',
          server: 'Radmir RP',
          createdBy: adminCheck.rows[0]?.id || 1,
          imageUrl: 'https://images.unsplash.com/photo-1544636331-e26879cd4d9b?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80'
        },
        {
          name: 'Audi RS6 Avant',
          description: '–£–Ω–∏–≤–µ—Ä—Å–∞–ª —Å –¥—É—à–æ–π —Å–ø–æ—Ä—Ç–∫–∞—Ä–∞. Quattro –ø–æ–ª–Ω—ã–π –ø—Ä–∏–≤–æ–¥, twin-turbo V8, –ø—Ä–∞–∫—Ç–∏—á–Ω–æ—Å—Ç—å –∏ —Å–∫–æ—Ä–æ—Å—Ç—å.',
          price: 3200000,
          category: '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—ã',
          server: 'Grand RP',
          createdBy: adminCheck.rows[0]?.id || 1,
          imageUrl: 'https://images.unsplash.com/photo-1606664515524-ed2f786a0bd6?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80'
        },
        {
          name: 'Tesla Model S Plaid',
          description: '–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π —Å–µ–¥–∞–Ω —Å —Ä–µ–∫–æ—Ä–¥–Ω–æ–π –¥–∏–Ω–∞–º–∏–∫–æ–π. –ê–≤—Ç–æ–ø–∏–ª–æ—Ç, –æ–≥—Ä–æ–º–Ω—ã–π –∑–∞–ø–∞—Å —Ö–æ–¥–∞, —Ñ—É—Ç—É—Ä–∏—Å—Ç–∏—á–Ω—ã–π –∏–Ω—Ç–µ—Ä—å–µ—Ä.',
          price: 2800000,
          category: '–≠–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–∏',
          server: 'Arizona RP',
          createdBy: adminCheck.rows[0]?.id || 1,
          imageUrl: 'https://images.unsplash.com/photo-1560958089-b8a1929cea89?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80'
        }
      ];

      for (const carData of sampleCars) {
        const car = await createCar(carData);
        console.log(`üöó Created car: ${car.name} (ID: ${car.id})`);
      }

      console.log(`‚úÖ Created ${sampleCars.length} sample cars`);
    } else {
      console.log(`‚úÖ Found ${carCount} existing cars in database`);
    }

    console.log('üéâ Database initialization completed successfully');

  } catch (error) {
    console.error('‚ùå Database initialization error:', error);
    throw error;
  }
}
