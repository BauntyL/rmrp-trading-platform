import { useState, useEffect, useRef } from "react";
import { useQuery, useMutation } from "@tanstack/react-query";
import { useAuth } from "@/hooks/use-auth";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { apiRequest, queryClient } from "@/lib/queryClient";
import { useToast } from "@/hooks/use-toast";
import { UserStatus } from "@/components/user-status";
import { deletedMessagesStore } from "@/lib/deleted-messages";

interface Message {
  id: number;
  carId: number;
  buyerId: number;
  sellerId: number;
  senderId: number;
  recipientId: number;
  content: string;
  isRead: boolean;
  createdAt: string;
  carName?: string;
  buyerName?: string;
  sellerName?: string;
  senderName?: string;
  receiverName?: string;
}

export function MessagesPanel() {
  const { user } = useAuth();
  const [selectedConversation, setSelectedConversation] = useState<number | null>(() => {
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–∏–∞–ª–æ–≥ –∏–∑ localStorage
    const saved = localStorage.getItem('selectedConversation');
    return saved ? parseInt(saved, 10) : null;
  });
  const [newMessage, setNewMessage] = useState("");
  const [deletedMessagesUpdate, setDeletedMessagesUpdate] = useState(0);
  const { toast } = useToast();
  const messagesEndRef = useRef<HTMLDivElement>(null);

  // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  useEffect(() => {
    const unsubscribe = deletedMessagesStore.subscribe(() => {
      setDeletedMessagesUpdate(prev => prev + 1);
    });
    return unsubscribe;
  }, []);

  const { data: messages = [], isLoading, error } = useQuery({
    queryKey: ["/api/messages"],
    enabled: !!user,
    staleTime: 5000,
    refetchOnMount: "always",
    refetchOnWindowFocus: false,
    refetchInterval: 2000, // –ë—ã—Å—Ç—Ä–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    retry: 1, 
    retryDelay: 1000,
  });

  // –ú—É—Ç–∞—Ü–∏—è –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö
  const markReadMutation = useMutation({
    mutationFn: async ({ carId, buyerId, sellerId }: { carId: number; buyerId: number; sellerId: number }) => {
      const res = await apiRequest("POST", "/api/messages/mark-read", { carId, buyerId, sellerId });
      if (!res.ok) {
        throw new Error(`–û—à–∏–±–∫–∞ HTTP: ${res.status}`);
      }
      return res.json();
    },
    onSuccess: (data) => {
      console.log("‚úÖ –°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ:", data);
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
      queryClient.invalidateQueries({ queryKey: ["/api/messages/unread-count"] });
      queryClient.invalidateQueries({ queryKey: ["/api/messages"] });
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
      setTimeout(() => {
        queryClient.invalidateQueries({ queryKey: ["/api/messages/unread-count"] });
      }, 500);
    },
    onError: (error) => {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π:", error);
    },
  });

  // –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ—Å–∫—Ä–æ–ª–ª–∞ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  // –ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–ª–∏ –≤—ã–±–æ—Ä–µ –¥–∏–∞–ª–æ–≥–∞
  useEffect(() => {
    if (selectedConversation && messages.length > 0) {
      setTimeout(scrollToBottom, 100);
    }
  }, [selectedConversation, messages]);

  const sendMessageMutation = useMutation({
    mutationFn: async (data: { carId: number; sellerId: number; message: string }) => {
      console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:', data);
      
      const response = await fetch('/api/messages', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        credentials: 'include',
        body: JSON.stringify({
          carId: data.carId,
          sellerId: data.sellerId,
          message: data.message
        }),
      });
      
      console.log('üì® –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status);
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è');
      }

      const result = await response.json();
      console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', result);
      return result;
    },
    onSuccess: () => {
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏–π
      queryClient.removeQueries({ queryKey: ["/api/messages"] });
      queryClient.invalidateQueries({ queryKey: ["/api/messages"] });
      queryClient.invalidateQueries({ queryKey: ["/api/messages/unread-count"] });
      
      setNewMessage("");
      toast({
        title: "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ",
        description: "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ",
      });
      // –°–∫—Ä–æ–ª–ª –∫ –Ω–æ–≤–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
      setTimeout(scrollToBottom, 200);
    },
    onError: (error: Error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: error.message,
        variant: "destructive",
      });
    },
  });

  // –§–∏–ª—å—Ç—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º
  const filteredMessages = (messages as Message[]).filter(message => !deletedMessagesStore.has(message.id));
  
  const conversationsByCarId = filteredMessages.reduce((acc: Record<number, Message[]>, message: Message) => {
    if (!acc[message.carId]) {
      acc[message.carId] = [];
    }
    acc[message.carId].push(message);
    return acc;
  }, {});

  // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
  const latestMessages = Object.values(conversationsByCarId)
    .map((carMessages: Message[]) => {
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
      const sorted = [...carMessages].sort((a: Message, b: Message) => 
        new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()
      );
      return sorted[0]; // –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    })
    .sort((a: Message, b: Message) => 
      new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()
    ); // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∏–∞–ª–æ–≥–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ—á–∞–µ–º –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ä–∞–∑–¥–µ–ª–∞ "–°–æ–æ–±—â–µ–Ω–∏—è"
  useEffect(() => {
    if (!user || !messages || markReadMutation.isPending) return;

    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const allUnreadMessages = (messages as Message[]).filter(
      (msg: Message) => !msg.isRead && msg.recipientId === user.id
    );

    if (allUnreadMessages.length > 0) {
      console.log(`üìñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ—á–∞–µ–º ${allUnreadMessages.length} —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ä–∞–∑–¥–µ–ª–∞ "–°–æ–æ–±—â–µ–Ω–∏—è"`);

      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –¥–∏–∞–ª–æ–≥–∞–º –∏ –æ—Ç–º–µ—á–∞–µ–º –∫–∞–∂–¥—ã–π –¥–∏–∞–ª–æ–≥
      const conversationsToMarkRead = new Map<number, { buyerId: number; sellerId: number }>();
      
      allUnreadMessages.forEach((msg: Message) => {
        if (!conversationsToMarkRead.has(msg.carId)) {
          conversationsToMarkRead.set(msg.carId, {
            buyerId: msg.buyerId,
            sellerId: msg.sellerId
          });
        }
      });

      // –û—Ç–º–µ—á–∞–µ–º –∫–∞–∂–¥—ã–π –¥–∏–∞–ª–æ–≥ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–π
      conversationsToMarkRead.forEach(({ buyerId, sellerId }, carId) => {
        markReadMutation.mutate(
          { carId, buyerId, sellerId },
          {
            onSuccess: (result) => {
              console.log(`‚úÖ –î–∏–∞–ª–æ–≥ ${carId} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–π:`, result);
              queryClient.invalidateQueries({ queryKey: ["/api/messages/unread-count"] });
            }
          }
        );
      });
    }
  }, [user?.id, messages?.length]); // –¢—Ä–∏–≥–≥–µ—Ä –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π

  // –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
  const handleSendMessage = () => {
    if (!newMessage.trim() || !selectedConversation || !user) return;

    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
    const conversationMessages = conversationsByCarId[selectedConversation];
    if (!conversationMessages || conversationMessages.length === 0) return;

    const firstMessage = conversationMessages[0];
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–µ—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–¥–∞–≤–µ—Ü, —Ç–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—å - –ø–æ–∫—É–ø–∞—Ç–µ–ª—å, –∏ –Ω–∞–æ–±–æ—Ä–æ—Ç)
    let sellerId: number;
    if (firstMessage.sellerId === user.id) {
      // –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ø—Ä–æ–¥–∞–≤–µ—Ü, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—é
      sellerId = firstMessage.buyerId;
    } else {
      // –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ø–æ–∫—É–ø–∞—Ç–µ–ª—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–¥–∞–≤—Ü—É
      sellerId = firstMessage.sellerId;
    }

    sendMessageMutation.mutate({
      carId: selectedConversation,
      sellerId: sellerId,
      message: newMessage.trim(),
    });
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ Enter –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–∏–∞–ª–æ–≥ –≤ localStorage
  useEffect(() => {
    if (selectedConversation) {
      localStorage.setItem('selectedConversation', selectedConversation.toString());
    }
  }, [selectedConversation]);

  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4"></div>
          <p className="text-slate-400">–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="text-center py-12">
        <p className="text-red-400 text-lg">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π</p>
        <p className="text-slate-500 text-sm mt-2">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É</p>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <h2 className="text-2xl font-bold text-white">–°–æ–æ–±—â–µ–Ω–∏—è</h2>
        <UserStatus />
      </div>

      <div className="bg-slate-800 rounded-xl border border-slate-700 h-[600px] flex overflow-hidden">
        {/* –°–ø–∏—Å–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤ */}
        <div className="w-1/3 border-r border-slate-700 flex flex-col">
          <div className="p-4 border-b border-slate-700">
            <h3 className="font-semibold text-white">–î–∏–∞–ª–æ–≥–∏</h3>
          </div>
          
          <div className="flex-1 overflow-y-auto">
            {latestMessages.length === 0 ? (
              <div className="p-4 text-center">
                <p className="text-slate-400">–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π</p>
              </div>
            ) : (
              latestMessages.map((message: Message) => {
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –∏ –∏–º—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
                const isFromCurrentUser = message.senderId === user?.id;
                const otherUserName = isFromCurrentUser ? message.receiverName : message.senderName;
                const carName = message.carName || `–ê–≤—Ç–æ–º–æ–±–∏–ª—å #${message.carId}`;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —ç—Ç–æ–º –¥–∏–∞–ª–æ–≥–µ
                const conversationMessages = conversationsByCarId[message.carId];
                const hasUnreadMessages = conversationMessages?.some(
                  msg => !msg.isRead && msg.recipientId === user?.id
                );

                return (
                  <div
                    key={message.carId}
                    className={`p-4 border-b border-slate-700 cursor-pointer hover:bg-slate-700 transition-colors ${
                      selectedConversation === message.carId ? 'bg-slate-700' : ''
                    }`}
                    onClick={() => setSelectedConversation(message.carId)}
                  >
                    <div className="flex items-start justify-between">
                      <div className="flex-1 min-w-0">
                        <h4 className="font-medium text-white truncate">{carName}</h4>
                        <p className="text-sm text-slate-400 truncate">
                          {otherUserName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}
                        </p>
                        <p className="text-xs text-slate-500 truncate mt-1">
                          {isFromCurrentUser ? '–í—ã: ' : ''}{message.content}
                        </p>
                      </div>
                      <div className="flex flex-col items-end ml-2">
                        <span className="text-xs text-slate-500">
                          {new Date(message.createdAt).toLocaleDateString('ru-RU', {
                            day: '2-digit',
                            month: '2-digit'
                          })}
                        </span>
                        {hasUnreadMessages && (
                          <div className="w-2 h-2 bg-red-500 rounded-full mt-1"></div>
                        )}
                      </div>
                    </div>
                  </div>
                );
              })
            )}
          </div>
        </div>

        {/* –û–±–ª–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–π */}
        <div className="flex-1 flex flex-col">
          {selectedConversation ? (
            <>
              {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–∏–∞–ª–æ–≥–∞ */}
              <div className="p-4 border-b border-slate-700">
                {(() => {
                  const conversationMessages = conversationsByCarId[selectedConversation];
                  if (!conversationMessages || conversationMessages.length === 0) {
                    return <h4 className="font-semibold text-white">–î–∏–∞–ª–æ–≥</h4>;
                  }
                  
                  const firstMessage = conversationMessages[0];
                  const carName = firstMessage.carName || `–ê–≤—Ç–æ–º–æ–±–∏–ª—å #${selectedConversation}`;
                  const otherUserName = firstMessage.senderId === user?.id 
                    ? firstMessage.receiverName 
                    : firstMessage.senderName;
                  
                  return (
                    <div>
                      <h4 className="font-semibold text-white">{carName}</h4>
                      <p className="text-sm text-slate-400">
                        –î–∏–∞–ª–æ–≥ —Å {otherUserName || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º'}
                      </p>
                    </div>
                  );
                })()}
              </div>

              {/* –°–æ–æ–±—â–µ–Ω–∏—è */}
              <div className="flex-1 overflow-y-auto p-4 space-y-4">
                {conversationsByCarId[selectedConversation]?.
                  sort((a: Message, b: Message) => new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime())
                  .map((message: Message) => (
                    <div
                      key={message.id}
                      className={`flex ${message.senderId === user?.id ? 'justify-end' : 'justify-start'}`}
                    >
                      <div
                        className={`max-w-xs lg:max-w-md px-4 py-2 rounded-lg ${
                          message.senderId === user?.id
                            ? 'bg-primary text-primary-foreground'
                            : 'bg-slate-700 text-white'
                        }`}
                      >
                        <p className="text-sm">{message.content}</p>
                        <p className="text-xs opacity-70 mt-1">
                          {new Date(message.createdAt).toLocaleTimeString('ru-RU', {
                            hour: '2-digit',
                            minute: '2-digit'
                          })}
                        </p>
                      </div>
                    </div>
                  ))
                }
                <div ref={messagesEndRef} />
              </div>

              {/* –ü–æ–ª–µ –≤–≤–æ–¥–∞ */}
              <div className="p-4 border-t border-slate-700">
                <div className="flex space-x-2">
                  <Input
                    value={newMessage}
                    onChange={(e) => setNewMessage(e.target.value)}
                    onKeyPress={handleKeyPress}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
                    className="flex-1 bg-slate-700 border-slate-600 text-white placeholder-slate-400"
                    maxLength={500}
                    disabled={sendMessageMutation.isPending}
                  />
                  <Button
                    onClick={handleSendMessage}
                    disabled={!newMessage.trim() || sendMessageMutation.isPending}
                    className="bg-primary hover:bg-primary/90"
                  >
                    {sendMessageMutation.isPending ? "..." : "–û—Ç–ø—Ä–∞–≤–∏—Ç—å"}
                  </Button>
                </div>
                <p className="text-xs text-slate-500 mt-1">
                  {newMessage.length}/500 —Å–∏–º–≤–æ–ª–æ–≤
                </p>
              </div>
            </>
          ) : (
            <div className="flex-1 flex items-center justify-center">
              <p className="text-slate-400">–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ª–æ–≥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π</p>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}
