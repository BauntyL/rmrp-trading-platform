import { useState } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { apiRequest } from "@/lib/queryClient";
import { useToast } from "@/hooks/use-toast";
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Button } from "@/components/ui/button";
import { Checkbox } from "@/components/ui/checkbox";

const carApplicationSchema = z.object({
  name: z.string().min(1, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è"),
  category: z.enum(["standard", "sport", "coupe", "suv", "motorcycle"], {
    required_error: "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
  }),
  server: z.enum(["arbat", "patriki", "rublevka", "tverskoy"], {
    required_error: "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä",
  }),
  price: z.coerce.number().min(1, "–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0"),
  maxSpeed: z.coerce.number().min(1, "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0"),
  acceleration: z.string().min(1, "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Ä–∞–∑–≥–æ–Ω–∞"),
  drive: z.enum(["FWD", "RWD", "AWD"], {
    required_error: "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–∏–≤–æ–¥–∞",
  }),
  serverId: z.string().optional(),
  phone: z.string().optional(),
  telegram: z.string().optional(),
  discord: z.string().optional(),
  imageUrl: z.string().url().optional().or(z.literal("")),
  description: z.string().optional(),
  isPremium: z.boolean().default(false),
});

type CarApplicationFormData = z.infer<typeof carApplicationSchema>;

interface AddCarModalProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
}

export function AddCarModal({ open, onOpenChange }: AddCarModalProps) {
  const { toast } = useToast();
  const queryClient = useQueryClient();

  const form = useForm<CarApplicationFormData>({
    resolver: zodResolver(carApplicationSchema),
    defaultValues: {
      name: "",
      category: undefined,
      server: undefined,
      price: 0,
      maxSpeed: 0,
      acceleration: "",
      drive: undefined,
      serverId: "",
      phone: "",
      telegram: "",
      discord: "",
      imageUrl: "",
      description: "",
      isPremium: false,
    },
  });

  const createApplicationMutation = useMutation({
    mutationFn: async (data: CarApplicationFormData) => {
      console.log('üöÄ Starting form submission...');
      console.log('üì§ Original form data:', data);
      
      // Filter out empty strings for optional fields
      const cleanData = {
        ...data,
        serverId: data.serverId || undefined,
        phone: data.phone || undefined,
        telegram: data.telegram || undefined,
        discord: data.discord || undefined,
        imageUrl: data.imageUrl || undefined,
        description: data.description || undefined,
      };
      
      console.log('üì§ Clean data to send:', cleanData);
      
      try {
        console.log('üì° Making API request to /api/applications...');
        const res = await apiRequest("POST", "/api/applications", cleanData);
        console.log('üì• Raw API Response:', res);
        console.log('üìä Response status:', res.status);
        console.log('üìä Response ok:', res.ok);
        
        if (!res.ok) {
          const errorText = await res.text();
          console.error('‚ùå API Error response:', errorText);
          throw new Error(`HTTP ${res.status}: ${errorText}`);
        }
        
        const result = await res.json();
        console.log('‚úÖ Parsed API Response:', result);
        return result;
        
      } catch (error) {
        console.error('üí• API Request failed:', error);
        throw error;
      }
    },
    onSuccess: (result) => {
      console.log('üéâ Mutation successful:', result);
      queryClient.invalidateQueries({ queryKey: ["/api/my-applications"] });
      queryClient.invalidateQueries({ queryKey: ["/api/applications/pending"] });
      toast({
        title: "–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞",
        description: "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é",
      });
      form.reset();
      onOpenChange(false);
    },
    onError: (error: any) => {
      console.error('üí• Mutation failed:', error);
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: error.message,
        variant: "destructive",
      });
    },
  });

  const onSubmit = (data: CarApplicationFormData) => {
    console.log('üöÄ Form submitted with data:', data);
    console.log('üîÑ Starting mutation...');
    createApplicationMutation.mutate(data);
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-2xl max-h-[90vh] overflow-y-auto bg-slate-800 border-slate-700">
        <DialogHeader>
          <DialogTitle className="text-xl font-bold text-white">–î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å</DialogTitle>
        </DialogHeader>

        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
            {/* Car Name */}
            <FormField
              control={form.control}
              name="name"
              render={({ field }) => (
                <FormItem>
                  <FormLabel className="text-slate-300">–ù–∞–∑–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è *</FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: BMW M5 Competition"
                      className="bg-slate-700 border-slate-600 text-white placeholder-slate-400"
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />

            {/* Category and Server */}
            <div className="grid grid-cols-2 gap-4">
              <FormField
                control={form.control}
                name="category"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel className="text-slate-300">–ö–∞—Ç–µ–≥–æ—Ä–∏—è *</FormLabel>
                    <Select onValueChange={field.onChange} value={field.value}>
                      <FormControl>
                        <SelectTrigger className="bg-slate-700 border-slate-600 text-white">
                          <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        <SelectItem value="standard">–°—Ç–∞–Ω–¥–∞—Ä—Ç</SelectItem>
                        <SelectItem value="sport">–°–ø–æ—Ä—Ç</SelectItem>
                        <SelectItem value="coupe">–ö—É–ø–µ</SelectItem>
                        <SelectItem value="suv">–í–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫</SelectItem>
                        <SelectItem value="motorcycle">–ú–æ—Ç–æ—Ü–∏–∫–ª</SelectItem>
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="server"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel className="text-slate-300">–°–µ—Ä–≤–µ—Ä *</FormLabel>
                    <Select onValueChange={field.onChange} value={field.value}>
                      <FormControl>
                        <SelectTrigger className="bg-slate-700 border-slate-600 text-white">
                          <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        <SelectItem value="arbat">–ê—Ä–±–∞—Ç</SelectItem>
                        <SelectItem value="patriki">–ü–∞—Ç—Ä–∏–∫–∏</SelectItem>
                        <SelectItem value="rublevka">–†—É–±–ª—ë–≤–∫–∞</SelectItem>
                        <SelectItem value="tverskoy">–¢–≤–µ—Ä—Å–∫–æ–π</SelectItem>
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>

            {/* Price and Speed */}
            <div className="grid grid-cols-2 gap-4">
              <FormField
                control={form.control}
                name="price"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel className="text-slate-300">–¶–µ–Ω–∞ (‚ÇΩ) *</FormLabel>
                    <FormControl>
                      <Input
                        {...field}
                        type="number"
                        placeholder="1500000"
                        className="bg-slate-700 border-slate-600 text-white placeholder-slate-400"
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="maxSpeed"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel className="text-slate-300">–ú–∞–∫—Å. —Å–∫–æ—Ä–æ—Å—Ç—å (–∫–º/—á) *</FormLabel>
                    <FormControl>
                      <Input
                        {...field}
                        type="number"
                        placeholder="250"
                        className="bg-slate-700 border-slate-600 text-white placeholder-slate-400"
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>

            {/* Acceleration and Drive */}
            <div className="grid grid-cols-2 gap-4">
              <FormField
                control={form.control}
                name="acceleration"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel className="text-slate-300">–†–∞–∑–≥–æ–Ω –¥–æ 100 –∫–º/—á *</FormLabel>
                    <FormControl>
                      <Input
                        {...field}
                        placeholder="5.2 —Å–µ–∫"
                        className="bg-slate-700 border-slate-600 text-white placeholder-slate-400"
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="drive"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel className="text-slate-300">–¢–∏–ø –ø—Ä–∏–≤–æ–¥–∞ *</FormLabel>
                    <Select onValueChange={field.onChange} value={field.value}>
                      <FormControl>
                        <SelectTrigger className="bg-slate-700 border-slate-600 text-white">
                          <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–≤–æ–¥" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        <SelectItem value="FWD">–ü–µ—Ä–µ–¥–Ω–∏–π (FWD)</SelectItem>
                        <SelectItem value="RWD">–ó–∞–¥–Ω–∏–π (RWD)</SelectItem>
                        <SelectItem value="AWD">–ü–æ–ª–Ω—ã–π (AWD)</SelectItem>
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>

            {/* Server ID */}
            <FormField
              control={form.control}
              name="serverId"
              render={({ field }) => (
                <FormItem>
                  <FormLabel className="text-slate-300">ID –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ</FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: #ABC-123"
                      className="bg-slate-700 border-slate-600 text-white placeholder-slate-400"
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />

            {/* Contact Information */}
            <div className="space-y-4">
              <h4 className="text-lg font-semibold text-white">–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h4>
              
              <FormField
                control={form.control}
                name="phone"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel className="text-slate-300">–¢–µ–ª–µ—Ñ–æ–Ω</FormLabel>
                    <FormControl>
                      <Input
                        {...field}
                        type="tel"
                        placeholder="+7 (999) 123-45-67"
                        className="bg-slate-700 border-slate-600 text-white placeholder-slate-400"
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <div className="grid grid-cols-2 gap-4">
                <FormField
                  control={form.control}
                  name="telegram"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel className="text-slate-300">Telegram</FormLabel>
                      <FormControl>
                        <Input
                          {...field}
                          placeholder="@username"
                          className="bg-slate-700 border-slate-600 text-white placeholder-slate-400"
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="discord"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel className="text-slate-300">Discord</FormLabel>
                      <FormControl>
                        <Input
                          {...field}
                          placeholder="username#1234"
                          className="bg-slate-700 border-slate-600 text-white placeholder-slate-400"
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>
            </div>

            {/* Image URL */}
            <FormField
              control={form.control}
              name="imageUrl"
              render={({ field }) => (
                <FormItem>
                  <FormLabel className="text-slate-300">–°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</FormLabel>
                  <FormControl>
                    <Input
                      {...field}
                      type="url"
                      placeholder="https://example.com/car-image.jpg"
                      className="bg-slate-700 border-slate-600 text-white placeholder-slate-400"
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />

            {/* Description */}
            <FormField
              control={form.control}
              name="description"
              render={({ field }) => (
                <FormItem>
                  <FormLabel className="text-slate-300">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ</FormLabel>
                  <FormControl>
                    <Textarea
                      {...field}
                      placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ..."
                      className="bg-slate-700 border-slate-600 text-white placeholder-slate-400 min-h-[80px]"
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />

            {/* Premium checkbox */}
            <FormField
              control={form.control}
              name="isPremium"
              render={({ field }) => (
                <FormItem className="flex flex-row items-start space-x-3 space-y-0 rounded-md border border-slate-600 p-4">
                  <FormControl>
                    <Checkbox
                      checked={field.value}
                      onCheckedChange={field.onChange}
                      className="border-slate-500 data-[state=checked]:bg-primary data-[state=checked]:border-primary"
                    />
                  </FormControl>
                  <div className="space-y-1 leading-none">
                    <FormLabel className="text-slate-300 cursor-pointer">
                      –ü—Ä–µ–º–∏—É–º –∞–≤—Ç–æ–º–æ–±–∏–ª—å
                    </FormLabel>
                    <p className="text-sm text-slate-400">
                      –û—Ç–º–µ—Ç—å—Ç–µ, –µ—Å–ª–∏ —ç—Ç–æ —Ä–µ–¥–∫–∏–π –∏–ª–∏ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å
                    </p>
                  </div>
                </FormItem>
              )}
            />

            {/* Submit Button */}
            <div className="flex gap-3 pt-6">
              <Button
                type="button"
                variant="outline"
                onClick={() => onOpenChange(false)}
                className="flex-1 border-slate-600 text-slate-300 hover:bg-slate-700"
              >
                –û—Ç–º–µ–Ω–∞
              </Button>
              <Button
                type="submit"
                className="flex-1 bg-primary hover:bg-primary/90"
                disabled={createApplicationMutation.isPending}
              >
                {createApplicationMutation.isPending ? "–û—Ç–ø—Ä–∞–≤–∫–∞..." : "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É"}
              </Button>
            </div>
          </form>
        </Form>
      </DialogContent>
    </Dialog>
  );
}
