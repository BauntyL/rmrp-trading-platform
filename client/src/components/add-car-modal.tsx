import { useState } from "react";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { useToast } from "@/hooks/use-toast";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { PlusCircle, Upload, X } from "lucide-react";

interface AddCarModalProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
}

export function AddCarModal({ open, onOpenChange }: AddCarModalProps) {
  const { toast } = useToast();
  const queryClient = useQueryClient();

  const [formData, setFormData] = useState({
    name: "",
    brand: "",
    model: "",
    year: "",
    price: "",
    mileage: "",
    fuelType: "",
    transmission: "",
    description: "",
    imageUrl: "",
  });

  const addCarMutation = useMutation({
    mutationFn: async (carData: any) => {
      try {
        console.log('üöó –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:', carData);
        
        const response = await fetch('/api/cars', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          credentials: 'include',
          body: JSON.stringify(carData),
        });

        console.log('üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status);

        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.error || '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è');
        }

        const result = await response.json();
        console.log('‚úÖ –ê–≤—Ç–æ–º–æ–±–∏–ª—å –¥–æ–±–∞–≤–ª–µ–Ω:', result);
        return result;
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è:', error);
        throw error;
      }
    },
    onSuccess: () => {
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∫–µ—à–∏
      queryClient.invalidateQueries({ queryKey: ["/api/cars"] });
      queryClient.invalidateQueries({ queryKey: ["/api/cars/my"] });
      
      toast({
        title: "–ê–≤—Ç–æ–º–æ–±–∏–ª—å –¥–æ–±–∞–≤–ª–µ–Ω",
        description: "–í–∞—à –∞–≤—Ç–æ–º–æ–±–∏–ª—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é",
      });
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª
      setFormData({
        name: "",
        brand: "",
        model: "",
        year: "",
        price: "",
        mileage: "",
        fuelType: "",
        transmission: "",
        description: "",
        imageUrl: "",
      });
      onOpenChange(false);
    },
    onError: (error: any) => {
      const errorMessage = error.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å";
      
      if (errorMessage.includes("Authentication required") || errorMessage.includes("–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü")) {
        toast({
          title: "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏",
          description: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π",
          variant: "destructive",
        });
      } else if (errorMessage.includes("–≤–∞–ª–∏–¥–∞—Ü") || errorMessage.includes("–æ–±—è–∑–∞—Ç–µ–ª—å–Ω")) {
        toast({
          title: "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏",
          description: "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª–µ–π",
          variant: "destructive",
        });
      } else {
        toast({
          title: "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è",
          description: errorMessage,
          variant: "destructive",
        });
      }
    },
  });

  const handleInputChange = (field: string, value: string) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    // –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
    if (!formData.name.trim() || !formData.brand.trim() || !formData.model.trim()) {
      toast({
        title: "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è",
        description: "–ù–∞–∑–≤–∞–Ω–∏–µ, –º–∞—Ä–∫–∞ –∏ –º–æ–¥–µ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è",
        variant: "destructive",
      });
      return;
    }

    if (!formData.year || !formData.price) {
      toast({
        title: "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è",
        description: "–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞ –∏ —Ü–µ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è",
        variant: "destructive",
      });
      return;
    }

    const year = parseInt(formData.year);
    const price = parseInt(formData.price);
    const mileage = formData.mileage ? parseInt(formData.mileage) : 0;

    if (year < 1900 || year > new Date().getFullYear() + 1) {
      toast({
        title: "–ù–µ–≤–µ—Ä–Ω—ã–π –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞",
        description: "–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
        variant: "destructive",
      });
      return;
    }

    if (price <= 0) {
      toast({
        title: "–ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞",
        description: "–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0",
        variant: "destructive",
      });
      return;
    }

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    const carData = {
      name: formData.name.trim(),
      brand: formData.brand.trim(),
      model: formData.model.trim(),
      year: year,
      price: price,
      mileage: mileage,
      fuelType: formData.fuelType || '–ë–µ–Ω–∑–∏–Ω',
      transmission: formData.transmission || '–ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∞—è',
      description: formData.description.trim() || '',
      imageUrl: formData.imageUrl.trim() || 'https://via.placeholder.com/400x300?text=–ù–µ—Ç+—Ñ–æ—Ç–æ',
    };

    console.log('üìù –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:', carData);
    addCarMutation.mutate(carData);
  };

  // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
  const handleOpenChange = (open: boolean) => {
    if (!open) {
      setFormData({
        name: "",
        brand: "",
        model: "",
        year: "",
        price: "",
        mileage: "",
        fuelType: "",
        transmission: "",
        description: "",
        imageUrl: "",
      });
    }
    onOpenChange(open);
  };

  return (
    <Dialog open={open} onOpenChange={handleOpenChange}>
      <DialogContent className="sm:max-w-[600px] bg-slate-800 border-slate-700 max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2 text-white">
            <PlusCircle className="h-5 w-5" />
            –î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å
          </DialogTitle>
          <DialogDescription className="text-slate-300">
            –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª–µ. –û–±—ä—è–≤–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.
          </DialogDescription>
        </DialogHeader>

        <form onSubmit={handleSubmit} className="space-y-4">
          {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label htmlFor="name" className="text-slate-300">
                –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è *
              </Label>
              <Input
                id="name"
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: BMW X5 –≤ –æ—Ç–ª–∏—á–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏"
                value={formData.name}
                onChange={(e) => handleInputChange('name', e.target.value)}
                required
                className="bg-slate-700 border-slate-600 text-white placeholder-slate-400"
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="imageUrl" className="text-slate-300">
                –°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ
              </Label>
              <Input
                id="imageUrl"
                type="url"
                placeholder="https://example.com/photo.jpg"
                value={formData.imageUrl}
                onChange={(e) => handleInputChange('imageUrl', e.target.value)}
                className="bg-slate-700 border-slate-600 text-white placeholder-slate-400"
              />
            </div>
          </div>

          {/* –ú–∞—Ä–∫–∞ –∏ –º–æ–¥–µ–ª—å */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label htmlFor="brand" className="text-slate-300">
                –ú–∞—Ä–∫–∞ *
              </Label>
              <Input
                id="brand"
                placeholder="BMW, Mercedes, Toyota..."
                value={formData.brand}
                onChange={(e) => handleInputChange('brand', e.target.value)}
                required
                className="bg-slate-700 border-slate-600 text-white placeholder-slate-400"
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="model" className="text-slate-300">
                –ú–æ–¥–µ–ª—å *
              </Label>
              <Input
                id="model"
                placeholder="X5, E-–∫–ª–∞—Å—Å, Camry..."
                value={formData.model}
                onChange={(e) => handleInputChange('model', e.target.value)}
                required
                className="bg-slate-700 border-slate-600 text-white placeholder-slate-400"
              />
            </div>
          </div>

          {/* –ì–æ–¥ –∏ —Ü–µ–Ω–∞ */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div className="space-y-2">
              <Label htmlFor="year" className="text-slate-300">
                –ì–æ–¥ –≤—ã–ø—É—Å–∫–∞ *
              </Label>
              <Input
                id="year"
                type="number"
                placeholder="2020"
                min="1900"
                max={new Date().getFullYear() + 1}
                value={formData.year}
                onChange={(e) => handleInputChange('year', e.target.value)}
                required
                className="bg-slate-700 border-slate-600 text-white placeholder-slate-400"
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="price" className="text-slate-300">
                –¶–µ–Ω–∞ (‚ÇΩ) *
              </Label>
              <Input
                id="price"
                type="number"
                placeholder="1500000"
                min="1"
                value={formData.price}
                onChange={(e) => handleInputChange('price', e.target.value)}
                required
                className="bg-slate-700 border-slate-600 text-white placeholder-slate-400"
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="mileage" className="text-slate-300">
                –ü—Ä–æ–±–µ–≥ (–∫–º)
              </Label>
              <Input
                id="mileage"
                type="number"
                placeholder="50000"
                min="0"
                value={formData.mileage}
                onChange={(e) => handleInputChange('mileage', e.target.value)}
                className="bg-slate-700 border-slate-600 text-white placeholder-slate-400"
              />
            </div>
          </div>

          {/* –¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞ –∏ –∫–æ—Ä–æ–±–∫–∞ */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label className="text-slate-300">–¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞</Label>
              <Select value={formData.fuelType} onValueChange={(value) => handleInputChange('fuelType', value)}>
                <SelectTrigger className="bg-slate-700 border-slate-600 text-white">
                  <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–æ–ø–ª–∏–≤–∞" />
                </SelectTrigger>
                <SelectContent className="bg-slate-700 border-slate-600">
                  <SelectItem value="–ë–µ–Ω–∑–∏–Ω">–ë–µ–Ω–∑–∏–Ω</SelectItem>
                  <SelectItem value="–î–∏–∑–µ–ª—å">–î–∏–∑–µ–ª—å</SelectItem>
                  <SelectItem value="–ì–∏–±—Ä–∏–¥">–ì–∏–±—Ä–∏–¥</SelectItem>
                  <SelectItem value="–≠–ª–µ–∫—Ç—Ä–æ">–≠–ª–µ–∫—Ç—Ä–æ</SelectItem>
                  <SelectItem value="–ì–∞–∑">–ì–∞–∑</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <Label className="text-slate-300">–ö–æ—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á</Label>
              <Select value={formData.transmission} onValueChange={(value) => handleInputChange('transmission', value)}>
                <SelectTrigger className="bg-slate-700 border-slate-600 text-white">
                  <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä–æ–±–∫—É –ø–µ—Ä–µ–¥–∞—á" />
                </SelectTrigger>
                <SelectContent className="bg-slate-700 border-slate-600">
                  <SelectItem value="–ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∞—è">–ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∞—è</SelectItem>
                  <SelectItem value="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è">–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è</SelectItem>
                  <SelectItem value="–†–æ–±–æ—Ç">–†–æ–±–æ—Ç</SelectItem>
                  <SelectItem value="–í–∞—Ä–∏–∞—Ç–æ—Ä">–í–∞—Ä–∏–∞—Ç–æ—Ä</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>

          {/* –û–ø–∏—Å–∞–Ω–∏–µ */}
          <div className="space-y-2">
            <Label htmlFor="description" className="text-slate-300">
              –û–ø–∏—Å–∞–Ω–∏–µ
            </Label>
            <Textarea
              id="description"
              placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ, –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏, —Å–æ—Å—Ç–æ—è–Ω–∏–∏..."
              value={formData.description}
              onChange={(e) => handleInputChange('description', e.target.value)}
              rows={4}
              className="resize-none bg-slate-700 border-slate-600 text-white placeholder-slate-400"
            />
          </div>

          {/* –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ */}
          <div className="bg-amber-50 dark:bg-amber-900/20 border border-amber-200 dark:border-amber-800 rounded-lg p-3">
            <p className="text-sm text-amber-800 dark:text-amber-200">
              <strong>–í–Ω–∏–º–∞–Ω–∏–µ:</strong> –í—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ö–æ–¥—è—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é –º–æ–¥–µ—Ä–∞—Ü–∏—é. 
              –ü—É–±–ª–∏–∫–∞—Ü–∏—è –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 24 —á–∞—Å–æ–≤.
            </p>
          </div>

          {/* –ö–Ω–æ–ø–∫–∏ */}
          <div className="flex gap-3 pt-4">
            <Button 
              type="button" 
              variant="outline" 
              onClick={() => handleOpenChange(false)}
              className="flex-1 bg-slate-700 text-white border-slate-600 hover:bg-slate-600"
            >
              –û—Ç–º–µ–Ω–∞
            </Button>
            <Button 
              type="submit" 
              disabled={addCarMutation.isPending}
              className="flex-1 gap-2 bg-primary hover:bg-primary/90"
            >
              {addCarMutation.isPending ? (
                <>
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                  –î–æ–±–∞–≤–ª–µ–Ω–∏–µ...
                </>
              ) : (
                <>
                  <PlusCircle className="h-4 w-4" />
                  –î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å
                </>
              )}
            </Button>
          </div>
        </form>
      </DialogContent>
    </Dialog>
  );
}
