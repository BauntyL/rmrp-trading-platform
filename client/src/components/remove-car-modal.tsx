import { useState } from "react";
import { useMutation } from "@tanstack/react-query";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { AlertTriangle, Loader2 } from "lucide-react";
import { Car } from "@shared/schema";
import { apiRequest, queryClient } from "@/lib/queryClient";
import { useToast } from "@/hooks/use-toast";
import { useAuth } from "@/hooks/use-auth";

interface RemoveCarModalProps {
  car: Car | null;
  open: boolean;
  onOpenChange: (open: boolean) => void;
}

export function RemoveCarModal({ car, open, onOpenChange }: RemoveCarModalProps) {
  const [confirmText, setConfirmText] = useState("");
  const { toast } = useToast();
  const { user } = useAuth();

  const removeCarMutation = useMutation({
    mutationFn: async (carId: number) => {
      console.log("üöÄ –ò—Å–ø–æ–ª—å–∑—É–µ–º WebSocket –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è ID:", carId);
      
      return new Promise((resolve, reject) => {
        const protocol = window.location.protocol === "https:" ? "wss:" : "ws:";
        const wsUrl = `${protocol}//${window.location.host}/ws`;
        const socket = new WebSocket(wsUrl);
        
        socket.onopen = () => {
          console.log("üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");
          
          // –°–Ω–∞—á–∞–ª–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ–º—Å—è
          socket.send(JSON.stringify({
            type: "authenticate",
            userId: user?.id
          }));
          
          // –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
          setTimeout(() => {
            console.log("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É DELETE_CAR");
            socket.send(JSON.stringify({
              type: "DELETE_CAR",
              carId: carId
            }));
          }, 100);
        };
        
        socket.onmessage = (event) => {
          try {
            const response = JSON.parse(event.data);
            console.log("üì® –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ WebSocket:", response);
            
            if (response.type === "DELETE_CAR_SUCCESS") {
              console.log("‚úÖ –ê–≤—Ç–æ–º–æ–±–∏–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω —á–µ—Ä–µ–∑ WebSocket");
              socket.close();
              resolve(response);
            } else if (response.type === "DELETE_CAR_ERROR") {
              console.log("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ WebSocket:", response.message);
              socket.close();
              reject(new Error(response.message));
            }
          } catch (error) {
            console.log("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ WebSocket –æ—Ç–≤–µ—Ç–∞:", error);
            socket.close();
            reject(error);
          }
        };
        
        socket.onerror = (error) => {
          console.log("‚ùå –û—à–∏–±–∫–∞ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:", error);
          socket.close();
          reject(new Error("–û—à–∏–±–∫–∞ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"));
        };
        
        // –¢–∞–π–º–∞—É—Ç –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–≤–∏—Å–∞–Ω–∏—è
        setTimeout(() => {
          if (socket.readyState === WebSocket.CONNECTING || socket.readyState === WebSocket.OPEN) {
            socket.close();
            reject(new Error("–¢–∞–π–º–∞—É—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è"));
          }
        }, 10000);
      });
    },
    onSuccess: (data) => {
      toast({
        title: "–£—Å–ø–µ—à–Ω–æ",
        description: data.message || "–ê–≤—Ç–æ–º–æ–±–∏–ª—å —Å–Ω—è—Ç —Å –ø—Ä–æ–¥–∞–∂–∏",
      });
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∫–µ—à–∏
      queryClient.invalidateQueries({ queryKey: ["/api/my-cars"] });
      queryClient.invalidateQueries({ queryKey: ["/api/cars"] });
      queryClient.invalidateQueries({ queryKey: ["/api/messages"] });
      queryClient.invalidateQueries({ queryKey: ["/api/favorites"] });
      
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      onOpenChange(false);
      setConfirmText("");
    },
    onError: (error: Error) => {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: error.message || "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–Ω—è—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å —Å –ø—Ä–æ–¥–∞–∂–∏",
        variant: "destructive",
      });
    },
  });

  const handleRemove = () => {
    console.log("üî¥ handleRemove –≤—ã–∑–≤–∞–Ω–∞");
    console.log("üî¥ car:", car);
    console.log("üî¥ confirmText:", confirmText);
    
    if (!car || confirmText.toLowerCase() !== "—É–¥–∞–ª–∏—Ç—å") {
      console.log("üî¥ –£—Å–ª–æ–≤–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, –≤—ã—Ö–æ–¥–∏–º");
      return;
    }
    
    console.log("üî¥ –ó–∞–ø—É—Å–∫–∞–µ–º –º—É—Ç–∞—Ü–∏—é –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è ID:", car.id);
    removeCarMutation.mutate(car.id);
  };

  const handleClose = () => {
    if (!removeCarMutation.isPending) {
      onOpenChange(false);
      setConfirmText("");
    }
  };

  if (!car) return null;

  return (
    <Dialog open={open} onOpenChange={handleClose}>
      <DialogContent className="sm:max-w-md">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2 text-red-600 dark:text-red-400">
            <AlertTriangle className="h-5 w-5" />
            –°–Ω—è—Ç—å —Å –ø—Ä–æ–¥–∞–∂–∏
          </DialogTitle>
          <DialogDescription className="text-left space-y-3">
            <div>
              –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —Å–Ω—è—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å <strong>"{car.name}"</strong> —Å –ø—Ä–æ–¥–∞–∂–∏?
            </div>
            
            <div className="bg-red-50 dark:bg-red-950/30 border border-red-200 dark:border-red-800 rounded-lg p-3">
              <div className="text-red-800 dark:text-red-200 text-sm font-medium mb-2">
                ‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ –∏ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫:
              </div>
              <ul className="text-red-700 dark:text-red-300 text-sm space-y-1 list-disc list-inside">
                <li>–ü–æ–ª–Ω–æ–º—É —É–¥–∞–ª–µ–Ω–∏—é –æ–±—ä—è–≤–ª–µ–Ω–∏—è</li>
                <li>–£–¥–∞–ª–µ–Ω–∏—é –≤—Å–µ—Ö –¥–∏–∞–ª–æ–≥–æ–≤ —Å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è–º–∏</li>
                <li>–£–¥–∞–ª–µ–Ω–∏—é –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</li>
                <li>–ü–æ—Ç–µ—Ä–µ –≤—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏ –æ–±—â–µ–Ω–∏—è</li>
              </ul>
            </div>
            
            <div>
              –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ <strong>"—É–¥–∞–ª–∏—Ç—å"</strong> –≤ –ø–æ–ª–µ –Ω–∏–∂–µ:
            </div>
          </DialogDescription>
        </DialogHeader>

        <div className="space-y-2">
          <Label htmlFor="confirm">–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ</Label>
          <Input
            id="confirm"
            value={confirmText}
            onChange={(e) => setConfirmText(e.target.value)}
            placeholder="–í–≤–µ–¥–∏—Ç–µ '—É–¥–∞–ª–∏—Ç—å'"
            disabled={removeCarMutation.isPending}
            className="text-center"
          />
        </div>

        <DialogFooter className="gap-2">
          <Button
            variant="outline"
            onClick={handleClose}
            disabled={removeCarMutation.isPending}
          >
            –û—Ç–º–µ–Ω–∞
          </Button>
          <Button
            variant="destructive"
            onClick={handleRemove}
            disabled={
              removeCarMutation.isPending || 
              confirmText.toLowerCase() !== "—É–¥–∞–ª–∏—Ç—å"
            }
          >
            {removeCarMutation.isPending ? (
              <>
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                –£–¥–∞–ª–µ–Ω–∏–µ...
              </>
            ) : (
              "–°–Ω—è—Ç—å —Å –ø—Ä–æ–¥–∞–∂–∏"
            )}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}