import { createContext, ReactNode, useContext, useState, useEffect } from "react";
import {
  useQuery,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { insertUserSchema, User as SelectUser, InsertUser } from "@shared/schema";
import { getQueryFn, apiRequest, queryClient } from "../lib/queryClient";
import { useToast } from "@/hooks/use-toast";

type AuthContextType = {
  user: SelectUser | null;
  isLoading: boolean;
  error: Error | null;
  loginMutation: UseMutationResult<SelectUser, Error, LoginData>;
  logoutMutation: UseMutationResult<void, Error, void>;
  registerMutation: UseMutationResult<SelectUser, Error, InsertUser>;
  showTermsModal: boolean;
  acceptTerms: () => void;
};

type LoginData = Pick<InsertUser, "username" | "password">;

export const AuthContext = createContext<AuthContextType | null>(null);

export function AuthProvider({ children }: { children: ReactNode }) {
  const { toast } = useToast();
  const [showTermsModal, setShowTermsModal] = useState(false);
  
  const {
    data: user,
    error,
    isLoading,
    isError,
  } = useQuery<SelectUser | null, Error>({
    queryKey: ["/api/user"],
    queryFn: async () => {
      try {
        console.log('üîÑ Fetching user data...');
        const response = await fetch('/api/user', {
          credentials: 'include',
          headers: {
            'Content-Type': 'application/json',
          },
        });

        console.log('üì° User API response status:', response.status);

        if (!response.ok) {
          if (response.status === 401) {
            console.log('üë§ User not authenticated (401)');
            return null;
          }
          throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();
        console.log('üì¶ Raw API response:', data);
        
        // –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º user –∏–∑ –æ—Ç–≤–µ—Ç–∞
        const userData = data?.user || data;
        
        if (userData && userData.id && userData.username) {
          console.log('‚úÖ Valid user data:', userData);
          return userData;
        } else {
          console.log('‚ùå Invalid user data structure:', data);
          return null;
        }
      } catch (error) {
        console.error('‚ùå Error fetching user:', error);
        return null; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null –≤–º–µ—Å—Ç–æ –≤—ã–±—Ä–æ—Å–∞ –æ—à–∏–±–∫–∏
      }
    },
    retry: false, // –û—Ç–∫–ª—é—á–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏
    staleTime: 30000,
    gcTime: 60000,
    refetchOnWindowFocus: false, // –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ
  });

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å —É—Å–ª–æ–≤–∏—è–º–∏
  useEffect(() => {
    // –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    if (user && typeof user === 'object' && user.id && user.username) {
      try {
        const termsAcceptedKey = `terms-accepted-${user.id}`;
        const hasAcceptedTerms = localStorage.getItem(termsAcceptedKey);
        
        if (!hasAcceptedTerms) {
          setShowTermsModal(true);
        }
      } catch (error) {
        console.error('‚ùå Error checking terms:', error);
      }
    }
  }, [user]);

  const acceptTerms = () => {
    // –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏
    if (user && typeof user === 'object' && user.id) {
      try {
        const termsAcceptedKey = `terms-accepted-${user.id}`;
        localStorage.setItem(termsAcceptedKey, 'true');
        setShowTermsModal(false);
      } catch (error) {
        console.error('‚ùå Error accepting terms:', error);
        setShowTermsModal(false); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
      }
    } else {
      setShowTermsModal(false);
    }
  };

  const loginMutation = useMutation({
    mutationFn: async (credentials: LoginData) => {
      try {
        console.log('üîë Attempting login for:', credentials.username);
        
        const response = await fetch('/api/login', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          credentials: 'include',
          body: JSON.stringify(credentials),
        });
        
        console.log('üì° Login response status:', response.status);
        
        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.error || "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏");
        }
        
        const data = await response.json();
        console.log('üì¶ Login response data:', data);
        
        // –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–º–µ–Ω–Ω–æ user –∏–∑ –æ—Ç–≤–µ—Ç–∞
        const userData = data?.user || data;
        
        if (!userData || !userData.id || !userData.username) {
          console.error('‚ùå Invalid user data from login:', userData);
          throw new Error("–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
        }
        
        console.log('‚úÖ Login successful:', userData);
        return userData;
      } catch (error) {
        console.error('‚ùå Login error:', error);
        throw error;
      }
    },
    onSuccess: (userData: SelectUser) => {
      console.log('‚úÖ Setting user data after login:', userData);
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–µ—à
      queryClient.setQueryData(["/api/user"], userData);
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      queryClient.invalidateQueries({ queryKey: ["/api/user"] });
      
      toast({
        title: "–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è",
        description: `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${userData.username}!`,
      });
    },
    onError: (error: Error) => {
      console.error('‚ùå Login mutation error:', error);
      
      // –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –Ω–µ—É–¥–∞—á–Ω–æ–º –≤—Ö–æ–¥–µ
      queryClient.setQueryData(["/api/user"], null);
      queryClient.removeQueries({ queryKey: ["/api/user"] });
      
      toast({
        title: "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏",
        description: error.message,
        variant: "destructive",
      });
    },
  });

  const registerMutation = useMutation({
    mutationFn: async (credentials: InsertUser) => {
      try {
        const response = await fetch('/api/register', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          credentials: 'include',
          body: JSON.stringify(credentials),
        });
        
        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.error || "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏");
        }
        
        const data = await response.json();
        const userData = data?.user || data;
        
        if (!userData || !userData.id || !userData.username) {
          throw new Error("–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
        }
        
        return userData;
      } catch (error) {
        console.error('‚ùå Registration error:', error);
        throw error;
      }
    },
    onSuccess: (userData: SelectUser) => {
      console.log('‚úÖ Setting user data after registration:', userData);
      queryClient.setQueryData(["/api/user"], userData);
      toast({
        title: "–£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è",
        description: `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ê–≤—Ç–æ–ö–∞—Ç–∞–ª–æ–≥, ${userData.username}!`,
      });
    },
    onError: (error: Error) => {
      toast({
        title: "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
        description: error.message,
        variant: "destructive",
      });
    },
  });

  const logoutMutation = useMutation({
    mutationFn: async () => {
      const response = await fetch('/api/logout', {
        method: 'POST',
        credentials: 'include',
      });
      
      if (!response.ok) {
        throw new Error('Logout failed');
      }
    },
    onSuccess: () => {
      queryClient.setQueryData(["/api/user"], null);
      queryClient.invalidateQueries({ queryKey: ["/api/user"] });
      queryClient.clear();
      toast({
        title: "–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã",
        description: "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!",
      });
    },
    onError: (error: Error) => {
      toast({
        title: "–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞",
        description: error.message,
        variant: "destructive",
      });
    },
  });

  // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const safeUser = user && typeof user === 'object' ? {
    id: user.id,
    username: user.username,
    role: user.role
  } : null;

  console.log('üîç Current auth state:', { 
    user: safeUser, 
    isLoading, 
    error: error?.message,
    hasUser: !!user,
    isValidUser: !!(user && user.id && user.username)
  });

  return (
    <AuthContext.Provider
      value={{
        user: user ?? null,
        isLoading,
        error,
        loginMutation,
        logoutMutation,
        registerMutation,
        showTermsModal,
        acceptTerms,
      }}
    >
      {children}
    </AuthContext.Provider>
  );
}

export function useAuth() {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error("useAuth must be used within an AuthProvider");
  }
  return context;
}
